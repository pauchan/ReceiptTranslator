// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220531.1

#pragma once
#ifndef WINRT_Microsoft_Graphics_Canvas_Printing_H
#define WINRT_Microsoft_Graphics_Canvas_Printing_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.220531.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.220531.1"
#include "winrt/Microsoft.Graphics.Canvas.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Graphics.Printing.2.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.Printing.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs<D>::PageNumber() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs)->get_PageNumber(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs<D>::PrintTaskOptions() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs)->get_PrintTaskOptions(&value));
        return winrt::Windows::Graphics::Printing::PrintTaskOptions{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs<D>::GetDeferral() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs)->GetDeferral(&value));
        return winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs<D>::DrawingSession() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs)->get_DrawingSession(&value));
        return winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDeferral<D>::Complete() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral)->Complete());
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::PrintTaskOptionsChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs> const& value) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->add_PrintTaskOptionsChanged(*(void**)(&value), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::PrintTaskOptionsChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs> const& value) const
    {
        return impl::make_event_revoker<D, PrintTaskOptionsChanged_revoker>(this, PrintTaskOptionsChanged(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::PrintTaskOptionsChanged(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->remove_PrintTaskOptionsChanged(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Preview(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, winrt::Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs> const& value) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->add_Preview(*(void**)(&value), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Preview(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, winrt::Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs> const& value) const
    {
        return impl::make_event_revoker<D, Preview_revoker>(this, Preview(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Preview(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->remove_Preview(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Print(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs> const& value) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->add_Print(*(void**)(&value), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Print(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs> const& value) const
    {
        return impl::make_event_revoker<D, Print_revoker>(this, Print(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Print(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->remove_Print(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::InvalidatePreview() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->InvalidatePreview());
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::SetPageCount(uint32_t count) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->SetPageCount(count));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::SetIntermediatePageCount(uint32_t count) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->SetIntermediatePageCount(count));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocumentFactory<D>::CreateWithDevice(winrt::Microsoft::Graphics::Canvas::CanvasDevice const& device) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocumentFactory)->CreateWithDevice(*(void**)(&device), &value));
        return winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs<D>::PrintTaskOptions() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs)->get_PrintTaskOptions(&value));
        return winrt::Windows::Graphics::Printing::PrintTaskOptions{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs<D>::Dpi() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs)->get_Dpi(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs<D>::Dpi(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs)->put_Dpi(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs<D>::GetDeferral() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs)->GetDeferral(&value));
        return winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs<D>::CreateDrawingSession() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs)->CreateDrawingSession(&value));
        return winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs<D>::CurrentPreviewPageNumber() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs)->get_CurrentPreviewPageNumber(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs<D>::NewPreviewPageNumber(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs)->put_NewPreviewPageNumber(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs<D>::NewPreviewPageNumber() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs)->get_NewPreviewPageNumber(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs<D>::GetDeferral() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs)->GetDeferral(&value));
        return winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs<D>::PrintTaskOptions() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs)->get_PrintTaskOptions(&value));
        return winrt::Windows::Graphics::Printing::PrintTaskOptions{ value, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs>
    {
        int32_t __stdcall get_PageNumber(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().PageNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PrintTaskOptions(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Graphics::Printing::PrintTaskOptions>(this->shim().PrintTaskOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DrawingSession(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().DrawingSession());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral>
    {
        int32_t __stdcall Complete() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Complete();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument>
    {
        int32_t __stdcall add_PrintTaskOptionsChanged(void* value, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PrintTaskOptionsChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs> const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PrintTaskOptionsChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PrintTaskOptionsChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_Preview(void* value, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Preview(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, winrt::Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs> const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Preview(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Preview(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_Print(void* value, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Print(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs> const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Print(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Print(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall InvalidatePreview() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InvalidatePreview();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetPageCount(uint32_t count) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetPageCount(count);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetIntermediatePageCount(uint32_t count) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetIntermediatePageCount(count);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocumentFactory> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocumentFactory>
    {
        int32_t __stdcall CreateWithDevice(void* device, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument>(this->shim().CreateWithDevice(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs>
    {
        int32_t __stdcall get_PrintTaskOptions(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Graphics::Printing::PrintTaskOptions>(this->shim().PrintTaskOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Dpi(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Dpi());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Dpi(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Dpi(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateDrawingSession(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().CreateDrawingSession());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs>
    {
        int32_t __stdcall get_CurrentPreviewPageNumber(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().CurrentPreviewPageNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_NewPreviewPageNumber(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NewPreviewPageNumber(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_NewPreviewPageNumber(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().NewPreviewPageNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PrintTaskOptions(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Graphics::Printing::PrintTaskOptions>(this->shim().PrintTaskOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas::Printing
{
    inline CanvasPrintDocument::CanvasPrintDocument() :
        CanvasPrintDocument(impl::call_factory_cast<CanvasPrintDocument(*)(winrt::Windows::Foundation::IActivationFactory const&), CanvasPrintDocument>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<CanvasPrintDocument>(); }))
    {
    }
    inline CanvasPrintDocument::CanvasPrintDocument(winrt::Microsoft::Graphics::Canvas::CanvasDevice const& device) :
        CanvasPrintDocument(impl::call_factory<CanvasPrintDocument, ICanvasPrintDocumentFactory>([&](ICanvasPrintDocumentFactory const& f) { return f.CreateWithDevice(device); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocumentFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
