// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220531.1

#pragma once
#ifndef WINRT_Microsoft_Graphics_Canvas_Effects_H
#define WINRT_Microsoft_Graphics_Canvas_Effects_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.220531.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.220531.1"
#include "winrt/Microsoft.Graphics.Canvas.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.Foundation.Numerics.2.h"
#include "winrt/impl/Windows.Graphics.DirectX.2.h"
#include "winrt/impl/Windows.Graphics.Effects.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.Effects.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect<D>::AlphaMask() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect)->get_AlphaMask(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect<D>::AlphaMask(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect)->put_AlphaMask(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffectStatics<D>::IsSupported() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffectStatics)->get_IsSupported(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::ClampOutput() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_ClampOutput(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::ClampOutput(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_ClampOutput(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::MultiplyAmount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_MultiplyAmount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::MultiplyAmount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_MultiplyAmount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source1Amount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_Source1Amount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source1Amount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_Source1Amount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source2Amount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_Source2Amount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source2Amount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_Source2Amount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Offset() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_Offset(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Offset(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_Offset(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source1() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_Source1(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source1(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_Source1(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source2() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_Source2(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source2(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_Source2(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IAtlasEffect<D>::SourceRectangle() const
    {
        winrt::Windows::Foundation::Rect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IAtlasEffect)->get_SourceRectangle(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IAtlasEffect<D>::SourceRectangle(winrt::Windows::Foundation::Rect const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IAtlasEffect)->put_SourceRectangle(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IAtlasEffect<D>::PaddingRectangle() const
    {
        winrt::Windows::Foundation::Rect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IAtlasEffect)->get_PaddingRectangle(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IAtlasEffect<D>::PaddingRectangle(winrt::Windows::Foundation::Rect const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IAtlasEffect)->put_PaddingRectangle(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IAtlasEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IAtlasEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IAtlasEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IAtlasEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBlendEffect<D>::Mode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::BlendEffectMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBlendEffect)->get_Mode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBlendEffect<D>::Mode(winrt::Microsoft::Graphics::Canvas::Effects::BlendEffectMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBlendEffect)->put_Mode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBlendEffect<D>::Background() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBlendEffect)->get_Background(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBlendEffect<D>::Background(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBlendEffect)->put_Background(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBlendEffect<D>::Foreground() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBlendEffect)->get_Foreground(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBlendEffect<D>::Foreground(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBlendEffect)->put_Foreground(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBorderEffect<D>::ExtendX() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBorderEffect)->get_ExtendX(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBorderEffect<D>::ExtendX(winrt::Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBorderEffect)->put_ExtendX(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBorderEffect<D>::ExtendY() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBorderEffect)->get_ExtendY(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBorderEffect<D>::ExtendY(winrt::Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBorderEffect)->put_ExtendY(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBorderEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBorderEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBorderEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBorderEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect<D>::WhitePoint() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect)->get_WhitePoint(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect<D>::WhitePoint(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect)->put_WhitePoint(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect<D>::BlackPoint() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect)->get_BlackPoint(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect<D>::BlackPoint(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect)->put_BlackPoint(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::CacheOutput() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->get_CacheOutput(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::CacheOutput(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->put_CacheOutput(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::BufferPrecision() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->get_BufferPrecision(&value));
        return winrt::Windows::Foundation::IReference<winrt::Microsoft::Graphics::Canvas::CanvasBufferPrecision>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::BufferPrecision(winrt::Windows::Foundation::IReference<winrt::Microsoft::Graphics::Canvas::CanvasBufferPrecision> const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->put_BufferPrecision(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::InvalidateSourceRectangle(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, uint32_t sourceIndex, winrt::Windows::Foundation::Rect const& invalidRectangle) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->InvalidateSourceRectangle(*(void**)(&resourceCreator), sourceIndex, impl::bind_in(invalidRectangle)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::GetInvalidRectangles(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator) const
    {
        uint32_t valueElements_impl_size{};
        winrt::Windows::Foundation::Rect* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->GetInvalidRectangles(*(void**)(&resourceCreator), &valueElements_impl_size, &valueElements));
        return com_array<winrt::Windows::Foundation::Rect>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::GetRequiredSourceRectangle(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, winrt::Windows::Foundation::Rect const& outputRectangle, winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect const& sourceEffect, uint32_t sourceIndex, winrt::Windows::Foundation::Rect const& sourceBounds) const
    {
        winrt::Windows::Foundation::Rect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->GetRequiredSourceRectangle(*(void**)(&resourceCreator), impl::bind_in(outputRectangle), *(void**)(&sourceEffect), sourceIndex, impl::bind_in(sourceBounds), put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::GetRequiredSourceRectangles(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, winrt::Windows::Foundation::Rect const& outputRectangle, array_view<winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect const> sourceEffects, array_view<uint32_t const> sourceIndices, array_view<winrt::Windows::Foundation::Rect const> sourceBounds) const
    {
        uint32_t valueElements_impl_size{};
        winrt::Windows::Foundation::Rect* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->GetRequiredSourceRectangles(*(void**)(&resourceCreator), impl::bind_in(outputRectangle), sourceEffects.size(), get_abi(sourceEffects), sourceIndices.size(), get_abi(sourceIndices), sourceBounds.size(), get_abi(sourceBounds), &valueElements_impl_size, &valueElements));
        return com_array<winrt::Windows::Foundation::Rect>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Color() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->get_Color(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Color(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->put_Color(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Tolerance() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->get_Tolerance(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Tolerance(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->put_Tolerance(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::InvertAlpha() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->get_InvertAlpha(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::InvertAlpha(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->put_InvertAlpha(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Feather() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->get_Feather(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Feather(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->put_Feather(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::ColorHdr() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->get_ColorHdr(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::ColorHdr(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->put_ColorHdr(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::SourceColorProfile() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_SourceColorProfile(&value));
        return winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::SourceColorProfile(winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_SourceColorProfile(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::SourceRenderingIntent() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_SourceRenderingIntent(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::SourceRenderingIntent(winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_SourceRenderingIntent(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::OutputColorProfile() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_OutputColorProfile(&value));
        return winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::OutputColorProfile(winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_OutputColorProfile(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::OutputRenderingIntent() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_OutputRenderingIntent(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::OutputRenderingIntent(winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_OutputRenderingIntent(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::AlphaMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_AlphaMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::AlphaMode(winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_AlphaMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::Quality() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_Quality(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::Quality(winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_Quality(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffectStatics<D>::IsBestQualitySupported(winrt::Microsoft::Graphics::Canvas::CanvasDevice const& device) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffectStatics)->IsBestQualitySupported(*(void**)(&device), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile<D>::ColorSpace() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasColorSpace value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile)->get_ColorSpace(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile<D>::IccProfile() const
    {
        uint32_t valueElements_impl_size{};
        uint8_t* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile)->get_IccProfile(&valueElements_impl_size, &valueElements));
        return com_array<uint8_t>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile<D>::Type() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile)->get_Type(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile<D>::SimpleProfile() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile)->get_SimpleProfile(&value));
        return winrt::Windows::Foundation::IReference<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile<D>::ExtendedColorSpace() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile)->get_ExtendedColorSpace(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileFactory<D>::Create(winrt::Microsoft::Graphics::Canvas::CanvasColorSpace const& colorSpace) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileFactory)->Create(static_cast<int32_t>(colorSpace), &result));
        return winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics<D>::CreateCustom(array_view<uint8_t const> iccProfile) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics)->CreateCustom(iccProfile.size(), get_abi(iccProfile), &result));
        return winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics<D>::CreateSimple(winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile const& simpleProfile) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics)->CreateSimple(impl::bind_in(simpleProfile), &result));
        return winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics<D>::CreateExtended(winrt::Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace const& colorSpace) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics)->CreateExtended(static_cast<int32_t>(colorSpace), &result));
        return winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics<D>::IsSupported(winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType const& type, winrt::Microsoft::Graphics::Canvas::CanvasDevice const& device) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics)->IsSupported(static_cast<int32_t>(type), *(void**)(&device), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::ColorMatrix() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::Matrix5x4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->get_ColorMatrix(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::ColorMatrix(winrt::Microsoft::Graphics::Canvas::Effects::Matrix5x4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->put_ColorMatrix(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::AlphaMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->get_AlphaMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::AlphaMode(winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->put_AlphaMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::ClampOutput() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->get_ClampOutput(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::ClampOutput(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->put_ClampOutput(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorSourceEffect<D>::Color() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorSourceEffect)->get_Color(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorSourceEffect<D>::Color(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorSourceEffect)->put_Color(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorSourceEffect<D>::ColorHdr() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorSourceEffect)->get_ColorHdr(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IColorSourceEffect<D>::ColorHdr(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IColorSourceEffect)->put_ColorHdr(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICompositeEffect<D>::Mode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasComposite value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICompositeEffect)->get_Mode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICompositeEffect<D>::Mode(winrt::Microsoft::Graphics::Canvas::CanvasComposite const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICompositeEffect)->put_Mode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICompositeEffect<D>::Sources() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICompositeEffect)->get_Sources(&value));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IContrastEffect<D>::Contrast() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IContrastEffect)->get_Contrast(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IContrastEffect<D>::Contrast(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IContrastEffect)->put_Contrast(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IContrastEffect<D>::ClampSource() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IContrastEffect)->get_ClampSource(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IContrastEffect<D>::ClampSource(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IContrastEffect)->put_ClampSource(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IContrastEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IContrastEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IContrastEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IContrastEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelScale() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_KernelScale(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelScale(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_KernelScale(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::InterpolationMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_InterpolationMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::InterpolationMode(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_InterpolationMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelWidth() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_KernelWidth(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelWidth(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_KernelWidth(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelHeight() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_KernelHeight(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelHeight(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_KernelHeight(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelMatrix() const
    {
        uint32_t valueElements_impl_size{};
        float* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_KernelMatrix(&valueElements_impl_size, &valueElements));
        return com_array<float>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelMatrix(array_view<float const> valueElements) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_KernelMatrix(valueElements.size(), get_abi(valueElements)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::Divisor() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_Divisor(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::Divisor(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_Divisor(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::Offset() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_Offset(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::Offset(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_Offset(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelOffset() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_KernelOffset(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelOffset(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_KernelOffset(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::PreserveAlpha() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_PreserveAlpha(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::PreserveAlpha(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_PreserveAlpha(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::ClampOutput() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_ClampOutput(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::ClampOutput(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_ClampOutput(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICropEffect<D>::SourceRectangle() const
    {
        winrt::Windows::Foundation::Rect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICropEffect)->get_SourceRectangle(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICropEffect<D>::SourceRectangle(winrt::Windows::Foundation::Rect const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICropEffect)->put_SourceRectangle(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICropEffect<D>::BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICropEffect)->get_BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICropEffect<D>::BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICropEffect)->put_BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICropEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICropEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICropEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICropEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect<D>::CrossFade() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect)->get_CrossFade(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect<D>::CrossFade(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect)->put_CrossFade(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect<D>::Source2() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect)->get_Source2(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect<D>::Source2(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect)->put_Source2(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect<D>::Source1() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect)->get_Source1(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect<D>::Source1(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect)->put_Source1(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffectStatics<D>::IsSupported() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffectStatics)->get_IsSupported(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::BlurAmount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->get_BlurAmount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::BlurAmount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->put_BlurAmount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::Angle() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->get_Angle(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::Angle(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->put_Angle(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::Optimization() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectOptimization value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->get_Optimization(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::Optimization(winrt::Microsoft::Graphics::Canvas::Effects::EffectOptimization const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->put_Optimization(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->get_BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->put_BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::RedTable() const
    {
        uint32_t valueElements_impl_size{};
        float* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_RedTable(&valueElements_impl_size, &valueElements));
        return com_array<float>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::RedTable(array_view<float const> valueElements) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_RedTable(valueElements.size(), get_abi(valueElements)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::RedDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_RedDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::RedDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_RedDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::GreenTable() const
    {
        uint32_t valueElements_impl_size{};
        float* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_GreenTable(&valueElements_impl_size, &valueElements));
        return com_array<float>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::GreenTable(array_view<float const> valueElements) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_GreenTable(valueElements.size(), get_abi(valueElements)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::GreenDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_GreenDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::GreenDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_GreenDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::BlueTable() const
    {
        uint32_t valueElements_impl_size{};
        float* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_BlueTable(&valueElements_impl_size, &valueElements));
        return com_array<float>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::BlueTable(array_view<float const> valueElements) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_BlueTable(valueElements.size(), get_abi(valueElements)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::BlueDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_BlueDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::BlueDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_BlueDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::AlphaTable() const
    {
        uint32_t valueElements_impl_size{};
        float* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_AlphaTable(&valueElements_impl_size, &valueElements));
        return com_array<float>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::AlphaTable(array_view<float const> valueElements) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_AlphaTable(valueElements.size(), get_abi(valueElements)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::AlphaDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_AlphaDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::AlphaDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_AlphaDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::ClampOutput() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_ClampOutput(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::ClampOutput(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_ClampOutput(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::Amount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->get_Amount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::Amount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->put_Amount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::XChannelSelect() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->get_XChannelSelect(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::XChannelSelect(winrt::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->put_XChannelSelect(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::YChannelSelect() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->get_YChannelSelect(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::YChannelSelect(winrt::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->put_YChannelSelect(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::Displacement() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->get_Displacement(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::Displacement(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->put_Displacement(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::Azimuth() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_Azimuth(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::Azimuth(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_Azimuth(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::Elevation() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_Elevation(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::Elevation(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_Elevation(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::DiffuseAmount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_DiffuseAmount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::DiffuseAmount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_DiffuseAmount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::HeightMapScale() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_HeightMapScale(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::HeightMapScale(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_HeightMapScale(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::LightColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_LightColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::LightColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_LightColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::HeightMapKernelSize() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_HeightMapKernelSize(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_HeightMapKernelSize(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::HeightMapInterpolationMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_HeightMapInterpolationMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::HeightMapInterpolationMode(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_HeightMapInterpolationMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::LightColorHdr() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_LightColorHdr(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::LightColorHdr(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_LightColorHdr(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::Azimuth() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_Azimuth(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::Azimuth(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_Azimuth(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::Elevation() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_Elevation(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::Elevation(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_Elevation(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::SpecularExponent() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_SpecularExponent(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::SpecularExponent(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_SpecularExponent(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::SpecularAmount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_SpecularAmount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::SpecularAmount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_SpecularAmount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::HeightMapScale() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_HeightMapScale(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::HeightMapScale(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_HeightMapScale(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::LightColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_LightColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::LightColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_LightColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::HeightMapKernelSize() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_HeightMapKernelSize(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_HeightMapKernelSize(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::HeightMapInterpolationMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_HeightMapInterpolationMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::HeightMapInterpolationMode(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_HeightMapInterpolationMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::LightColorHdr() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_LightColorHdr(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::LightColorHdr(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_LightColorHdr(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::InterpolationMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->get_InterpolationMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::InterpolationMode(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->put_InterpolationMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->get_BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->put_BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::SourceDpi() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->get_SourceDpi(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::SourceDpi(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->put_SourceDpi(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::Amount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->get_Amount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::Amount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->put_Amount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::BlurAmount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->get_BlurAmount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::BlurAmount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->put_BlurAmount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::Mode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->get_Mode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::Mode(winrt::Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->put_Mode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::OverlayEdges() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->get_OverlayEdges(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::OverlayEdges(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->put_OverlayEdges(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::AlphaMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->get_AlphaMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::AlphaMode(winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->put_AlphaMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3D<D>::Device() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D)->get_Device(&value));
        return winrt::Microsoft::Graphics::Canvas::CanvasDevice{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3DStatics<D>::CreateFromColors(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<winrt::Windows::UI::Color const> colors, int32_t sizeB, int32_t sizeG, int32_t sizeR) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics)->CreateFromColors(*(void**)(&resourceCreator), colors.size(), get_abi(colors), sizeB, sizeG, sizeR, &result));
        return winrt::Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3DStatics<D>::CreateFromBytes(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<uint8_t const> bytes, int32_t sizeB, int32_t sizeG, int32_t sizeR, winrt::Windows::Graphics::DirectX::DirectXPixelFormat const& format) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics)->CreateFromBytes(*(void**)(&resourceCreator), bytes.size(), get_abi(bytes), sizeB, sizeG, sizeR, static_cast<int32_t>(format), &result));
        return winrt::Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEmbossEffect<D>::Amount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEmbossEffect)->get_Amount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEmbossEffect<D>::Amount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEmbossEffect)->put_Amount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEmbossEffect<D>::Angle() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEmbossEffect)->get_Angle(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEmbossEffect<D>::Angle(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEmbossEffect)->put_Angle(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEmbossEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEmbossEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IEmbossEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IEmbossEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IExposureEffect<D>::Exposure() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IExposureEffect)->get_Exposure(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IExposureEffect<D>::Exposure(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IExposureEffect)->put_Exposure(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IExposureEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IExposureEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IExposureEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IExposureEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedAmplitude() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_RedAmplitude(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedAmplitude(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_RedAmplitude(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedExponent() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_RedExponent(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedExponent(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_RedExponent(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedOffset() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_RedOffset(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedOffset(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_RedOffset(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_RedDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_RedDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenAmplitude() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_GreenAmplitude(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenAmplitude(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_GreenAmplitude(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenExponent() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_GreenExponent(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenExponent(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_GreenExponent(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenOffset() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_GreenOffset(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenOffset(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_GreenOffset(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_GreenDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_GreenDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueAmplitude() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_BlueAmplitude(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueAmplitude(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_BlueAmplitude(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueExponent() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_BlueExponent(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueExponent(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_BlueExponent(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueOffset() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_BlueOffset(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueOffset(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_BlueOffset(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_BlueDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_BlueDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaAmplitude() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_AlphaAmplitude(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaAmplitude(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_AlphaAmplitude(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaExponent() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_AlphaExponent(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaExponent(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_AlphaExponent(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaOffset() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_AlphaOffset(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaOffset(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_AlphaOffset(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_AlphaDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_AlphaDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::ClampOutput() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_ClampOutput(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::ClampOutput(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_ClampOutput(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::BlurAmount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->get_BlurAmount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::BlurAmount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->put_BlurAmount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::Optimization() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectOptimization value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->get_Optimization(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::Optimization(winrt::Microsoft::Graphics::Canvas::Effects::EffectOptimization const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->put_Optimization(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->get_BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->put_BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGrayscaleEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IGrayscaleEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Highlights() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->get_Highlights(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Highlights(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->put_Highlights(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Shadows() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->get_Shadows(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Shadows(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->put_Shadows(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Clarity() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->get_Clarity(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Clarity(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->put_Clarity(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::MaskBlurAmount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->get_MaskBlurAmount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::MaskBlurAmount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->put_MaskBlurAmount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::SourceIsLinearGamma() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->get_SourceIsLinearGamma(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::SourceIsLinearGamma(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->put_SourceIsLinearGamma(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHueRotationEffect<D>::Angle() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHueRotationEffect)->get_Angle(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHueRotationEffect<D>::Angle(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHueRotationEffect)->put_Angle(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHueRotationEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHueRotationEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHueRotationEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHueRotationEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect<D>::SourceColorSpace() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect)->get_SourceColorSpace(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect<D>::SourceColorSpace(winrt::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect)->put_SourceColorSpace(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IInvertEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IInvertEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IInvertEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IInvertEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::RedOffset() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_RedOffset(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::RedOffset(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_RedOffset(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::RedSlope() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_RedSlope(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::RedSlope(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_RedSlope(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::RedDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_RedDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::RedDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_RedDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::GreenOffset() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_GreenOffset(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::GreenOffset(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_GreenOffset(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::GreenSlope() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_GreenSlope(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::GreenSlope(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_GreenSlope(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::GreenDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_GreenDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::GreenDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_GreenDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::BlueOffset() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_BlueOffset(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::BlueOffset(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_BlueOffset(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::BlueSlope() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_BlueSlope(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::BlueSlope(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_BlueSlope(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::BlueDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_BlueDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::BlueDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_BlueDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::AlphaOffset() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_AlphaOffset(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::AlphaOffset(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_AlphaOffset(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::AlphaSlope() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_AlphaSlope(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::AlphaSlope(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_AlphaSlope(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::AlphaDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_AlphaDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::AlphaDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_AlphaDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::ClampOutput() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_ClampOutput(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::ClampOutput(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_ClampOutput(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILuminanceToAlphaEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ILuminanceToAlphaEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Mode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->get_Mode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Mode(winrt::Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->put_Mode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Width() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->get_Width(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Width(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->put_Width(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Height() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->get_Height(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Height(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->put_Height(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IOpacityEffect<D>::Opacity() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffect)->get_Opacity(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IOpacityEffect<D>::Opacity(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffect)->put_Opacity(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IOpacityEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IOpacityEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IOpacityEffectStatics<D>::IsSupported() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffectStatics)->get_IsSupported(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect<D>::OpaqueRectangle() const
    {
        winrt::Windows::Foundation::Rect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect)->get_OpaqueRectangle(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect<D>::OpaqueRectangle(winrt::Windows::Foundation::Rect const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect)->put_OpaqueRectangle(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Properties() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Properties(&value));
        return winrt::Windows::Foundation::Collections::IMap<hstring, winrt::Windows::Foundation::IInspectable>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source1(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source2(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source3(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source4(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source5(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source6(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source7(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source8(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source1(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source2(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source3(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source4(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source5(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source6(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source7(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source8(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1Mapping() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source1Mapping(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2Mapping() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source2Mapping(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3Mapping() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source3Mapping(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4Mapping() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source4Mapping(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5Mapping() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source5Mapping(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6Mapping() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source6Mapping(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7Mapping() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source7Mapping(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8Mapping() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source8Mapping(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1Mapping(winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source1Mapping(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2Mapping(winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source2Mapping(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3Mapping(winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source3Mapping(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4Mapping(winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source4Mapping(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5Mapping(winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source5Mapping(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6Mapping(winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source6Mapping(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7Mapping(winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source7Mapping(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8Mapping(winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source8Mapping(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source1BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source2BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source3BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source4BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source5BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source6BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source7BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source8BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source1BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source2BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source3BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source4BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source5BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source6BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source7BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source8BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::MaxSamplerOffset() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_MaxSamplerOffset(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::MaxSamplerOffset(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_MaxSamplerOffset(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1Interpolation() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source1Interpolation(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2Interpolation() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source2Interpolation(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3Interpolation() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source3Interpolation(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4Interpolation() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source4Interpolation(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5Interpolation() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source5Interpolation(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6Interpolation() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source6Interpolation(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7Interpolation() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source7Interpolation(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8Interpolation() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source8Interpolation(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1Interpolation(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source1Interpolation(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2Interpolation(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source2Interpolation(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3Interpolation(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source3Interpolation(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4Interpolation(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source4Interpolation(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5Interpolation(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source5Interpolation(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6Interpolation(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source6Interpolation(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7Interpolation(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source7Interpolation(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8Interpolation(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source8Interpolation(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::IsSupported(winrt::Microsoft::Graphics::Canvas::CanvasDevice const& device) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->IsSupported(*(void**)(&device), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffectFactory<D>::Create(array_view<uint8_t const> shaderCode) const
    {
        void* effect{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffectFactory)->Create(shaderCode.size(), get_abi(shaderCode), &effect));
        return winrt::Microsoft::Graphics::Canvas::Effects::PixelShaderEffect{ effect, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::LightPosition() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_LightPosition(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::LightPosition(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_LightPosition(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::DiffuseAmount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_DiffuseAmount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::DiffuseAmount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_DiffuseAmount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::HeightMapScale() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_HeightMapScale(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::HeightMapScale(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_HeightMapScale(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::LightColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_LightColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::LightColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_LightColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::HeightMapKernelSize() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_HeightMapKernelSize(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_HeightMapKernelSize(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::HeightMapInterpolationMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_HeightMapInterpolationMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::HeightMapInterpolationMode(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_HeightMapInterpolationMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::LightColorHdr() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_LightColorHdr(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::LightColorHdr(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_LightColorHdr(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::LightPosition() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_LightPosition(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::LightPosition(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_LightPosition(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::SpecularExponent() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_SpecularExponent(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::SpecularExponent(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_SpecularExponent(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::SpecularAmount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_SpecularAmount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::SpecularAmount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_SpecularAmount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::HeightMapScale() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_HeightMapScale(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::HeightMapScale(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_HeightMapScale(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::LightColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_LightColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::LightColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_LightColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::HeightMapKernelSize() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_HeightMapKernelSize(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_HeightMapKernelSize(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::HeightMapInterpolationMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_HeightMapInterpolationMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::HeightMapInterpolationMode(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_HeightMapInterpolationMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::LightColorHdr() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_LightColorHdr(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::LightColorHdr(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_LightColorHdr(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::RedValueCount() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->get_RedValueCount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::RedValueCount(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->put_RedValueCount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::GreenValueCount() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->get_GreenValueCount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::GreenValueCount(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->put_GreenValueCount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::BlueValueCount() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->get_BlueValueCount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::BlueValueCount(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->put_BlueValueCount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPremultiplyEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IPremultiplyEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect<D>::OutputColorSpace() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect)->get_OutputColorSpace(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect<D>::OutputColorSpace(winrt::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect)->put_OutputColorSpace(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISaturationEffect<D>::Saturation() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISaturationEffect)->get_Saturation(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISaturationEffect<D>::Saturation(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISaturationEffect)->put_Saturation(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISaturationEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISaturationEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISaturationEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISaturationEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::Scale() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect)->get_Scale(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::Scale(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect)->put_Scale(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::CenterPoint() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect)->get_CenterPoint(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::CenterPoint(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect)->put_CenterPoint(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::InterpolationMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect)->get_InterpolationMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::InterpolationMode(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect)->put_InterpolationMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect)->get_BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect)->put_BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::Sharpness() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect)->get_Sharpness(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::Sharpness(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect)->put_Sharpness(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISepiaEffect<D>::Intensity() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISepiaEffect)->get_Intensity(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISepiaEffect<D>::Intensity(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISepiaEffect)->put_Intensity(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISepiaEffect<D>::AlphaMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISepiaEffect)->get_AlphaMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISepiaEffect<D>::AlphaMode(winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISepiaEffect)->put_AlphaMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISepiaEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISepiaEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISepiaEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISepiaEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::BlurAmount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect)->get_BlurAmount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::BlurAmount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect)->put_BlurAmount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::ShadowColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect)->get_ShadowColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::ShadowColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect)->put_ShadowColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::Optimization() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectOptimization value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect)->get_Optimization(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::Optimization(winrt::Microsoft::Graphics::Canvas::Effects::EffectOptimization const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect)->put_Optimization(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::ShadowColorHdr() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect)->get_ShadowColorHdr(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::ShadowColorHdr(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect)->put_ShadowColorHdr(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISharpenEffect<D>::Amount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISharpenEffect)->get_Amount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISharpenEffect<D>::Amount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISharpenEffect)->put_Amount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISharpenEffect<D>::Threshold() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISharpenEffect)->get_Threshold(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISharpenEffect<D>::Threshold(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISharpenEffect)->put_Threshold(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISharpenEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISharpenEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISharpenEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISharpenEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightPosition() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_LightPosition(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightPosition(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_LightPosition(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightTarget() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_LightTarget(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightTarget(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_LightTarget(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::Focus() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_Focus(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::Focus(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_Focus(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LimitingConeAngle() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_LimitingConeAngle(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LimitingConeAngle(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_LimitingConeAngle(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::DiffuseAmount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_DiffuseAmount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::DiffuseAmount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_DiffuseAmount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::HeightMapScale() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_HeightMapScale(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::HeightMapScale(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_HeightMapScale(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_LightColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_LightColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::HeightMapKernelSize() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_HeightMapKernelSize(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_HeightMapKernelSize(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::HeightMapInterpolationMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_HeightMapInterpolationMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::HeightMapInterpolationMode(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_HeightMapInterpolationMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightColorHdr() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_LightColorHdr(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightColorHdr(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_LightColorHdr(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightPosition() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_LightPosition(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightPosition(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_LightPosition(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightTarget() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_LightTarget(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightTarget(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_LightTarget(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::Focus() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_Focus(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::Focus(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_Focus(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LimitingConeAngle() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_LimitingConeAngle(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LimitingConeAngle(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_LimitingConeAngle(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::SpecularExponent() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_SpecularExponent(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::SpecularExponent(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_SpecularExponent(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::SpecularAmount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_SpecularAmount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::SpecularAmount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_SpecularAmount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::HeightMapScale() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_HeightMapScale(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::HeightMapScale(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_HeightMapScale(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_LightColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_LightColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::HeightMapKernelSize() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_HeightMapKernelSize(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_HeightMapKernelSize(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::HeightMapInterpolationMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_HeightMapInterpolationMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::HeightMapInterpolationMode(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_HeightMapInterpolationMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightColorHdr() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_LightColorHdr(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightColorHdr(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_LightColorHdr(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::Angle() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->get_Angle(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::Angle(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->put_Angle(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::MaintainSize() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->get_MaintainSize(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::MaintainSize(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->put_MaintainSize(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::InterpolationMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->get_InterpolationMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::InterpolationMode(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->put_InterpolationMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect<D>::Table() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect)->get_Table(&value));
        return winrt::Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect<D>::Table(winrt::Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect)->put_Table(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect<D>::AlphaMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect)->get_AlphaMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect<D>::AlphaMode(winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect)->put_AlphaMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::RedTable() const
    {
        uint32_t valueElements_impl_size{};
        float* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_RedTable(&valueElements_impl_size, &valueElements));
        return com_array<float>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::RedTable(array_view<float const> valueElements) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_RedTable(valueElements.size(), get_abi(valueElements)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::RedDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_RedDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::RedDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_RedDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::GreenTable() const
    {
        uint32_t valueElements_impl_size{};
        float* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_GreenTable(&valueElements_impl_size, &valueElements));
        return com_array<float>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::GreenTable(array_view<float const> valueElements) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_GreenTable(valueElements.size(), get_abi(valueElements)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::GreenDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_GreenDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::GreenDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_GreenDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::BlueTable() const
    {
        uint32_t valueElements_impl_size{};
        float* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_BlueTable(&valueElements_impl_size, &valueElements));
        return com_array<float>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::BlueTable(array_view<float const> valueElements) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_BlueTable(valueElements.size(), get_abi(valueElements)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::BlueDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_BlueDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::BlueDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_BlueDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::AlphaTable() const
    {
        uint32_t valueElements_impl_size{};
        float* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_AlphaTable(&valueElements_impl_size, &valueElements));
        return com_array<float>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::AlphaTable(array_view<float const> valueElements) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_AlphaTable(valueElements.size(), get_abi(valueElements)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::AlphaDisable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_AlphaDisable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::AlphaDisable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_AlphaDisable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::ClampOutput() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_ClampOutput(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::ClampOutput(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_ClampOutput(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect<D>::Temperature() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect)->get_Temperature(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect<D>::Temperature(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect)->put_Temperature(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect<D>::Tint() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect)->get_Tint(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect<D>::Tint(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect)->put_Tint(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITileEffect<D>::SourceRectangle() const
    {
        winrt::Windows::Foundation::Rect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITileEffect)->get_SourceRectangle(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITileEffect<D>::SourceRectangle(winrt::Windows::Foundation::Rect const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITileEffect)->put_SourceRectangle(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITileEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITileEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITileEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITileEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::Color() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect)->get_Color(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::Color(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect)->put_Color(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::ClampOutput() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect)->get_ClampOutput(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::ClampOutput(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect)->put_ClampOutput(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::ColorHdr() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect)->get_ColorHdr(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::ColorHdr(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect)->put_ColorHdr(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITintEffectStatics<D>::IsSupported() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITintEffectStatics)->get_IsSupported(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::InterpolationMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->get_InterpolationMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::InterpolationMode(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->put_InterpolationMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->get_BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->put_BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::TransformMatrix() const
    {
        winrt::Windows::Foundation::Numerics::float3x2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->get_TransformMatrix(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::TransformMatrix(winrt::Windows::Foundation::Numerics::float3x2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->put_TransformMatrix(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::Sharpness() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->get_Sharpness(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::Sharpness(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->put_Sharpness(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::InterpolationMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->get_InterpolationMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::InterpolationMode(winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->put_InterpolationMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::BorderMode() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->get_BorderMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::BorderMode(winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->put_BorderMode(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::TransformMatrix() const
    {
        winrt::Windows::Foundation::Numerics::float4x4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->get_TransformMatrix(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::TransformMatrix(winrt::Windows::Foundation::Numerics::float4x4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->put_TransformMatrix(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Offset() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Offset(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Offset(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Offset(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Size() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Size(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Size(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Size(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Frequency() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Frequency(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Frequency(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Frequency(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Octaves() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Octaves(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Octaves(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Octaves(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Seed() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Seed(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Seed(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Seed(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Noise() const
    {
        winrt::Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Noise(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Noise(winrt::Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Noise(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Tileable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Tileable(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Tileable(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Tileable(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IUnPremultiplyEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IUnPremultiplyEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect)->put_Source(*(void**)(&source)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Color() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->get_Color(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Color(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->put_Color(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Amount() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->get_Amount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Amount(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->put_Amount(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Curve() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->get_Curve(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Curve(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->put_Curve(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::ColorHdr() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->get_ColorHdr(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::ColorHdr(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->put_ColorHdr(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Source() const
    {
        void* source{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->get_Source(&source));
        return winrt::Windows::Graphics::Effects::IGraphicsEffectSource{ source, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Source(winrt::Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->put_Source(*(void**)(&source)));
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect>
    {
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaMask(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().AlphaMask());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaMask(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaMask(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffectStatics> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffectStatics>
    {
        int32_t __stdcall get_IsSupported(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect>
    {
        int32_t __stdcall get_ClampOutput(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ClampOutput(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MultiplyAmount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MultiplyAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MultiplyAmount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MultiplyAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source1Amount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Source1Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source1Amount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source1Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source2Amount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Source2Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source2Amount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source2Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Offset(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Offset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Offset(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Offset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source1(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source1());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source1(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source1(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source2(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source2(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source2(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IAtlasEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IAtlasEffect>
    {
        int32_t __stdcall get_SourceRectangle(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().SourceRectangle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SourceRectangle(winrt::Windows::Foundation::Rect value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SourceRectangle(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PaddingRectangle(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().PaddingRectangle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PaddingRectangle(winrt::Windows::Foundation::Rect value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PaddingRectangle(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IBlendEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IBlendEffect>
    {
        int32_t __stdcall get_Mode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::BlendEffectMode>(this->shim().Mode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Mode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Mode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::BlendEffectMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Background(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Background());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Background(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Background(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Foreground(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Foreground());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Foreground(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Foreground(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IBorderEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IBorderEffect>
    {
        int32_t __stdcall get_ExtendX(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasEdgeBehavior>(this->shim().ExtendX());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ExtendX(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ExtendX(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExtendY(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasEdgeBehavior>(this->shim().ExtendY());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ExtendY(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ExtendY(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect>
    {
        int32_t __stdcall get_WhitePoint(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().WhitePoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_WhitePoint(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WhitePoint(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlackPoint(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().BlackPoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlackPoint(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlackPoint(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect>
    {
        int32_t __stdcall get_CacheOutput(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().CacheOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CacheOutput(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CacheOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BufferPrecision(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::IReference<winrt::Microsoft::Graphics::Canvas::CanvasBufferPrecision>>(this->shim().BufferPrecision());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BufferPrecision(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BufferPrecision(*reinterpret_cast<winrt::Windows::Foundation::IReference<winrt::Microsoft::Graphics::Canvas::CanvasBufferPrecision> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall InvalidateSourceRectangle(void* resourceCreator, uint32_t sourceIndex, winrt::Windows::Foundation::Rect invalidRectangle) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InvalidateSourceRectangle(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), sourceIndex, *reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&invalidRectangle));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetInvalidRectangles(void* resourceCreator, uint32_t* __valueElementsSize, winrt::Windows::Foundation::Rect** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetInvalidRectangles(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRequiredSourceRectangle(void* resourceCreator, winrt::Windows::Foundation::Rect outputRectangle, void* sourceEffect, uint32_t sourceIndex, winrt::Windows::Foundation::Rect sourceBounds, winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().GetRequiredSourceRectangle(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), *reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&outputRectangle), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect const*>(&sourceEffect), sourceIndex, *reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&sourceBounds)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRequiredSourceRectangles(void* resourceCreator, winrt::Windows::Foundation::Rect outputRectangle, uint32_t __sourceEffectsSize, void** sourceEffects, uint32_t __sourceIndicesSize, uint32_t* sourceIndices, uint32_t __sourceBoundsSize, winrt::Windows::Foundation::Rect* sourceBounds, uint32_t* __valueElementsSize, winrt::Windows::Foundation::Rect** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetRequiredSourceRectangles(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), *reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&outputRectangle), array_view<winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect const>(reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect const *>(sourceEffects), reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect const *>(sourceEffects) + __sourceEffectsSize), array_view<uint32_t const>(reinterpret_cast<uint32_t const *>(sourceIndices), reinterpret_cast<uint32_t const *>(sourceIndices) + __sourceIndicesSize), array_view<winrt::Windows::Foundation::Rect const>(reinterpret_cast<winrt::Windows::Foundation::Rect const *>(sourceBounds), reinterpret_cast<winrt::Windows::Foundation::Rect const *>(sourceBounds) + __sourceBoundsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect>
    {
        int32_t __stdcall get_Color(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().Color());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Color(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Color(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Tolerance(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Tolerance());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Tolerance(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Tolerance(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InvertAlpha(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().InvertAlpha());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InvertAlpha(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InvertAlpha(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Feather(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Feather());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Feather(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Feather(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ColorHdr(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().ColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ColorHdr(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ColorHdr(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect>
    {
        int32_t __stdcall get_SourceColorProfile(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile>(this->shim().SourceColorProfile());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SourceColorProfile(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SourceColorProfile(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SourceRenderingIntent(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent>(this->shim().SourceRenderingIntent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SourceRenderingIntent(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SourceRenderingIntent(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_OutputColorProfile(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile>(this->shim().OutputColorProfile());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_OutputColorProfile(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OutputColorProfile(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_OutputRenderingIntent(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent>(this->shim().OutputRenderingIntent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_OutputRenderingIntent(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OutputRenderingIntent(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Quality(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality>(this->shim().Quality());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Quality(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Quality(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffectStatics> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffectStatics>
    {
        int32_t __stdcall IsBestQualitySupported(void* device, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsBestQualitySupported(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile>
    {
        int32_t __stdcall get_ColorSpace(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasColorSpace>(this->shim().ColorSpace());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IccProfile(uint32_t* __valueElementsSize, uint8_t** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().IccProfile());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Type(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType>(this->shim().Type());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SimpleProfile(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::IReference<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile>>(this->shim().SimpleProfile());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExtendedColorSpace(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace>(this->shim().ExtendedColorSpace());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileFactory> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileFactory>
    {
        int32_t __stdcall Create(int32_t colorSpace, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile>(this->shim().Create(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasColorSpace const*>(&colorSpace)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics>
    {
        int32_t __stdcall CreateCustom(uint32_t __iccProfileSize, uint8_t* iccProfile, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile>(this->shim().CreateCustom(array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(iccProfile), reinterpret_cast<uint8_t const *>(iccProfile) + __iccProfileSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateSimple(struct struct_Microsoft_Graphics_Canvas_Effects_ColorManagementSimpleProfile simpleProfile, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile>(this->shim().CreateSimple(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile const*>(&simpleProfile)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateExtended(int32_t colorSpace, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile>(this->shim().CreateExtended(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace const*>(&colorSpace)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSupported(int32_t type, void* device, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsSupported(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType const*>(&type), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect>
    {
        int32_t __stdcall get_ColorMatrix(struct struct_Microsoft_Graphics_Canvas_Effects_Matrix5x4* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::Graphics::Canvas::Effects::Matrix5x4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::Matrix5x4>(this->shim().ColorMatrix());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ColorMatrix(struct struct_Microsoft_Graphics_Canvas_Effects_Matrix5x4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ColorMatrix(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::Matrix5x4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ClampOutput(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ClampOutput(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorSourceEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IColorSourceEffect>
    {
        int32_t __stdcall get_Color(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().Color());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Color(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Color(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ColorHdr(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().ColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ColorHdr(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ColorHdr(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ICompositeEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ICompositeEffect>
    {
        int32_t __stdcall get_Mode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasComposite>(this->shim().Mode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Mode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Mode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasComposite const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Sources(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>>(this->shim().Sources());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IContrastEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IContrastEffect>
    {
        int32_t __stdcall get_Contrast(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Contrast());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Contrast(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Contrast(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ClampSource(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ClampSource());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ClampSource(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClampSource(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect>
    {
        int32_t __stdcall get_KernelScale(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().KernelScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_KernelScale(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().KernelScale(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InterpolationMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().InterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InterpolationMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InterpolationMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_KernelWidth(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().KernelWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_KernelWidth(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().KernelWidth(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_KernelHeight(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().KernelHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_KernelHeight(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().KernelHeight(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_KernelMatrix(uint32_t* __valueElementsSize, float** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().KernelMatrix());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_KernelMatrix(uint32_t __valueElementsSize, float* valueElements) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().KernelMatrix(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Divisor(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Divisor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Divisor(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Divisor(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Offset(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Offset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Offset(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Offset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_KernelOffset(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().KernelOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_KernelOffset(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().KernelOffset(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PreserveAlpha(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().PreserveAlpha());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PreserveAlpha(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PreserveAlpha(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ClampOutput(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ClampOutput(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ICropEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ICropEffect>
    {
        int32_t __stdcall get_SourceRectangle(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().SourceRectangle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SourceRectangle(winrt::Windows::Foundation::Rect value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SourceRectangle(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect>
    {
        int32_t __stdcall get_CrossFade(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().CrossFade());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CrossFade(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CrossFade(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source2(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source2(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source2(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source1(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source1());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source1(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source1(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffectStatics> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffectStatics>
    {
        int32_t __stdcall get_IsSupported(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect>
    {
        int32_t __stdcall get_BlurAmount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().BlurAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlurAmount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlurAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Angle(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Angle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Angle(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Angle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Optimization(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectOptimization>(this->shim().Optimization());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Optimization(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Optimization(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectOptimization const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect>
    {
        int32_t __stdcall get_RedTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().RedTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RedTable(uint32_t __valueElementsSize, float* valueElements) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RedTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RedDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().RedDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RedDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RedDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GreenTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GreenTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GreenTable(uint32_t __valueElementsSize, float* valueElements) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GreenTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GreenDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().GreenDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GreenDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GreenDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlueTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().BlueTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlueTable(uint32_t __valueElementsSize, float* valueElements) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlueTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlueDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().BlueDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlueDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlueDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().AlphaTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaTable(uint32_t __valueElementsSize, float* valueElements) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AlphaDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ClampOutput(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ClampOutput(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect>
    {
        int32_t __stdcall get_Amount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Amount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_XChannelSelect(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect>(this->shim().XChannelSelect());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_XChannelSelect(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().XChannelSelect(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_YChannelSelect(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect>(this->shim().YChannelSelect());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_YChannelSelect(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().YChannelSelect(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Displacement(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Displacement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Displacement(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Displacement(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect>
    {
        int32_t __stdcall get_Azimuth(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Azimuth());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Azimuth(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Azimuth(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Elevation(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Elevation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Elevation(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Elevation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DiffuseAmount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().DiffuseAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DiffuseAmount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DiffuseAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapScale(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().HeightMapScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapScale(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().LightColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().HeightMapKernelSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapKernelSize(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapInterpolationMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().HeightMapInterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapInterpolationMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapInterpolationMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightColorHdr(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().LightColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightColorHdr(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightColorHdr(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect>
    {
        int32_t __stdcall get_Azimuth(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Azimuth());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Azimuth(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Azimuth(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Elevation(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Elevation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Elevation(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Elevation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SpecularExponent(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().SpecularExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SpecularExponent(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SpecularExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SpecularAmount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().SpecularAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SpecularAmount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SpecularAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapScale(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().HeightMapScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapScale(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().LightColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().HeightMapKernelSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapKernelSize(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapInterpolationMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().HeightMapInterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapInterpolationMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapInterpolationMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightColorHdr(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().LightColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightColorHdr(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightColorHdr(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect>
    {
        int32_t __stdcall get_InterpolationMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().InterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InterpolationMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InterpolationMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SourceDpi(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().SourceDpi());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SourceDpi(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SourceDpi(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect>
    {
        int32_t __stdcall get_Amount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Amount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlurAmount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().BlurAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlurAmount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlurAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Mode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode>(this->shim().Mode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Mode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Mode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_OverlayEdges(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().OverlayEdges());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_OverlayEdges(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OverlayEdges(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D>
    {
        int32_t __stdcall get_Device(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics>
    {
        int32_t __stdcall CreateFromColors(void* resourceCreator, uint32_t __colorsSize, struct struct_Windows_UI_Color* colors, int32_t sizeB, int32_t sizeG, int32_t sizeR, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D>(this->shim().CreateFromColors(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<winrt::Windows::UI::Color const>(reinterpret_cast<winrt::Windows::UI::Color const *>(colors), reinterpret_cast<winrt::Windows::UI::Color const *>(colors) + __colorsSize), sizeB, sizeG, sizeR));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateFromBytes(void* resourceCreator, uint32_t __bytesSize, uint8_t* bytes, int32_t sizeB, int32_t sizeG, int32_t sizeR, int32_t format, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D>(this->shim().CreateFromBytes(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(bytes), reinterpret_cast<uint8_t const *>(bytes) + __bytesSize), sizeB, sizeG, sizeR, *reinterpret_cast<winrt::Windows::Graphics::DirectX::DirectXPixelFormat const*>(&format)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IEmbossEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IEmbossEffect>
    {
        int32_t __stdcall get_Amount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Amount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Angle(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Angle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Angle(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Angle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IExposureEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IExposureEffect>
    {
        int32_t __stdcall get_Exposure(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Exposure());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Exposure(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Exposure(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect>
    {
        int32_t __stdcall get_RedAmplitude(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().RedAmplitude());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RedAmplitude(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RedAmplitude(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RedExponent(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().RedExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RedExponent(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RedExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RedOffset(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().RedOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RedOffset(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RedOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RedDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().RedDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RedDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RedDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GreenAmplitude(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().GreenAmplitude());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GreenAmplitude(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GreenAmplitude(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GreenExponent(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().GreenExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GreenExponent(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GreenExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GreenOffset(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().GreenOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GreenOffset(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GreenOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GreenDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().GreenDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GreenDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GreenDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlueAmplitude(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().BlueAmplitude());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlueAmplitude(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlueAmplitude(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlueExponent(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().BlueExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlueExponent(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlueExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlueOffset(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().BlueOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlueOffset(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlueOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlueDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().BlueDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlueDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlueDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaAmplitude(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().AlphaAmplitude());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaAmplitude(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaAmplitude(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaExponent(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().AlphaExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaExponent(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaOffset(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().AlphaOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaOffset(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AlphaDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ClampOutput(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ClampOutput(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect>
    {
        int32_t __stdcall get_BlurAmount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().BlurAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlurAmount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlurAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Optimization(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectOptimization>(this->shim().Optimization());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Optimization(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Optimization(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectOptimization const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect>
    {
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect>
    {
        int32_t __stdcall get_Highlights(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Highlights());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Highlights(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Highlights(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Shadows(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Shadows());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Shadows(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Shadows(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Clarity(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Clarity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Clarity(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Clarity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaskBlurAmount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MaskBlurAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaskBlurAmount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaskBlurAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SourceIsLinearGamma(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().SourceIsLinearGamma());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SourceIsLinearGamma(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SourceIsLinearGamma(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IHueRotationEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IHueRotationEffect>
    {
        int32_t __stdcall get_Angle(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Angle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Angle(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Angle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect>
    {
        int32_t __stdcall get_SourceColorSpace(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace>(this->shim().SourceColorSpace());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SourceColorSpace(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SourceColorSpace(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IInvertEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IInvertEffect>
    {
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect>
    {
        int32_t __stdcall get_RedOffset(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().RedOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RedOffset(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RedOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RedSlope(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().RedSlope());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RedSlope(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RedSlope(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RedDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().RedDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RedDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RedDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GreenOffset(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().GreenOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GreenOffset(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GreenOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GreenSlope(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().GreenSlope());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GreenSlope(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GreenSlope(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GreenDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().GreenDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GreenDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GreenDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlueOffset(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().BlueOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlueOffset(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlueOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlueSlope(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().BlueSlope());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlueSlope(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlueSlope(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlueDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().BlueDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlueDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlueDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaOffset(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().AlphaOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaOffset(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaSlope(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().AlphaSlope());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaSlope(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaSlope(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AlphaDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ClampOutput(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ClampOutput(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect>
    {
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect>
    {
        int32_t __stdcall get_Mode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode>(this->shim().Mode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Mode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Mode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Width(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().Width());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Width(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Width(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Height(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().Height());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Height(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Height(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffect>
    {
        int32_t __stdcall get_Opacity(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Opacity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Opacity(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Opacity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffectStatics> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffectStatics>
    {
        int32_t __stdcall get_IsSupported(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect>
    {
        int32_t __stdcall get_OpaqueRectangle(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().OpaqueRectangle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_OpaqueRectangle(winrt::Windows::Foundation::Rect value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OpaqueRectangle(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect>
    {
        int32_t __stdcall get_Properties(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IMap<hstring, winrt::Windows::Foundation::IInspectable>>(this->shim().Properties());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source1(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source1());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source2(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source3(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source3());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source4(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source4());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source5(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source5());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source6(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source6());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source7(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source7());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source8(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source8());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source1(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source1(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source2(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source2(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source3(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source3(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source4(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source4(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source5(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source5(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source6(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source6(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source7(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source7(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source8(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source8(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source1Mapping(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source1Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source2Mapping(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source2Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source3Mapping(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source3Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source4Mapping(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source4Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source5Mapping(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source5Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source6Mapping(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source6Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source7Mapping(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source7Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source8Mapping(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source8Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source1Mapping(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source1Mapping(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source2Mapping(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source2Mapping(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source3Mapping(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source3Mapping(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source4Mapping(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source4Mapping(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source5Mapping(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source5Mapping(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source6Mapping(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source6Mapping(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source7Mapping(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source7Mapping(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source8Mapping(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source8Mapping(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source1BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source1BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source2BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source2BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source3BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source3BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source4BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source4BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source5BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source5BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source6BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source6BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source7BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source7BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source8BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source8BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source1BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source1BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source2BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source2BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source3BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source3BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source4BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source4BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source5BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source5BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source6BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source6BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source7BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source7BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source8BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source8BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxSamplerOffset(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().MaxSamplerOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxSamplerOffset(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxSamplerOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source1Interpolation(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source1Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source2Interpolation(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source2Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source3Interpolation(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source3Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source4Interpolation(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source4Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source5Interpolation(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source5Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source6Interpolation(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source6Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source7Interpolation(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source7Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source8Interpolation(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source8Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source1Interpolation(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source1Interpolation(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source2Interpolation(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source2Interpolation(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source3Interpolation(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source3Interpolation(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source4Interpolation(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source4Interpolation(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source5Interpolation(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source5Interpolation(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source6Interpolation(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source6Interpolation(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source7Interpolation(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source7Interpolation(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source8Interpolation(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source8Interpolation(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSupported(void* device, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsSupported(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffectFactory> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffectFactory>
    {
        int32_t __stdcall Create(uint32_t __shaderCodeSize, uint8_t* shaderCode, void** effect) noexcept final try
        {
            clear_abi(effect);
            typename D::abi_guard guard(this->shim());
            *effect = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::PixelShaderEffect>(this->shim().Create(array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(shaderCode), reinterpret_cast<uint8_t const *>(shaderCode) + __shaderCodeSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect>
    {
        int32_t __stdcall get_LightPosition(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().LightPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightPosition(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightPosition(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DiffuseAmount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().DiffuseAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DiffuseAmount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DiffuseAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapScale(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().HeightMapScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapScale(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().LightColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().HeightMapKernelSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapKernelSize(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapInterpolationMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().HeightMapInterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapInterpolationMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapInterpolationMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightColorHdr(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().LightColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightColorHdr(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightColorHdr(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect>
    {
        int32_t __stdcall get_LightPosition(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().LightPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightPosition(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightPosition(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SpecularExponent(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().SpecularExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SpecularExponent(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SpecularExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SpecularAmount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().SpecularAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SpecularAmount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SpecularAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapScale(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().HeightMapScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapScale(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().LightColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().HeightMapKernelSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapKernelSize(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapInterpolationMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().HeightMapInterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapInterpolationMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapInterpolationMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightColorHdr(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().LightColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightColorHdr(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightColorHdr(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect>
    {
        int32_t __stdcall get_RedValueCount(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().RedValueCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RedValueCount(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RedValueCount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GreenValueCount(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().GreenValueCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GreenValueCount(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GreenValueCount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlueValueCount(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().BlueValueCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlueValueCount(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlueValueCount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect>
    {
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect>
    {
        int32_t __stdcall get_OutputColorSpace(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace>(this->shim().OutputColorSpace());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_OutputColorSpace(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OutputColorSpace(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ISaturationEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ISaturationEffect>
    {
        int32_t __stdcall get_Saturation(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Saturation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Saturation(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Saturation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect>
    {
        int32_t __stdcall get_Scale(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().Scale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Scale(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Scale(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CenterPoint(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().CenterPoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CenterPoint(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CenterPoint(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InterpolationMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().InterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InterpolationMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InterpolationMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Sharpness(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Sharpness());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Sharpness(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Sharpness(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ISepiaEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ISepiaEffect>
    {
        int32_t __stdcall get_Intensity(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Intensity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Intensity(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Intensity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect>
    {
        int32_t __stdcall get_BlurAmount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().BlurAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlurAmount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlurAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShadowColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().ShadowColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ShadowColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShadowColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Optimization(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectOptimization>(this->shim().Optimization());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Optimization(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Optimization(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectOptimization const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShadowColorHdr(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().ShadowColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ShadowColorHdr(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShadowColorHdr(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ISharpenEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ISharpenEffect>
    {
        int32_t __stdcall get_Amount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Amount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Threshold(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Threshold());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Threshold(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Threshold(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect>
    {
        int32_t __stdcall get_LightPosition(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().LightPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightPosition(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightPosition(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightTarget(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().LightTarget());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightTarget(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightTarget(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Focus(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Focus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Focus(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Focus(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LimitingConeAngle(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().LimitingConeAngle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LimitingConeAngle(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LimitingConeAngle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DiffuseAmount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().DiffuseAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DiffuseAmount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DiffuseAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapScale(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().HeightMapScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapScale(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().LightColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().HeightMapKernelSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapKernelSize(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapInterpolationMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().HeightMapInterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapInterpolationMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapInterpolationMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightColorHdr(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().LightColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightColorHdr(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightColorHdr(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect>
    {
        int32_t __stdcall get_LightPosition(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().LightPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightPosition(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightPosition(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightTarget(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().LightTarget());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightTarget(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightTarget(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Focus(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Focus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Focus(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Focus(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LimitingConeAngle(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().LimitingConeAngle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LimitingConeAngle(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LimitingConeAngle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SpecularExponent(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().SpecularExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SpecularExponent(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SpecularExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SpecularAmount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().SpecularAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SpecularAmount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SpecularAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapScale(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().HeightMapScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapScale(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().LightColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().HeightMapKernelSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapKernelSize(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapKernelSize(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeightMapInterpolationMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().HeightMapInterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeightMapInterpolationMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeightMapInterpolationMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LightColorHdr(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().LightColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LightColorHdr(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LightColorHdr(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect>
    {
        int32_t __stdcall get_Angle(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Angle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Angle(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Angle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaintainSize(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().MaintainSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaintainSize(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaintainSize(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InterpolationMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().InterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InterpolationMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InterpolationMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect>
    {
        int32_t __stdcall get_Table(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D>(this->shim().Table());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Table(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Table(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect>
    {
        int32_t __stdcall get_RedTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().RedTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RedTable(uint32_t __valueElementsSize, float* valueElements) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RedTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RedDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().RedDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RedDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RedDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GreenTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GreenTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GreenTable(uint32_t __valueElementsSize, float* valueElements) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GreenTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GreenDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().GreenDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GreenDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GreenDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlueTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().BlueTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlueTable(uint32_t __valueElementsSize, float* valueElements) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlueTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BlueDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().BlueDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BlueDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BlueDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().AlphaTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaTable(uint32_t __valueElementsSize, float* valueElements) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaDisable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AlphaDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlphaDisable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlphaDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ClampOutput(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ClampOutput(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect>
    {
        int32_t __stdcall get_Temperature(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Temperature());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Temperature(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Temperature(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Tint(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Tint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Tint(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Tint(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ITileEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ITileEffect>
    {
        int32_t __stdcall get_SourceRectangle(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().SourceRectangle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SourceRectangle(winrt::Windows::Foundation::Rect value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SourceRectangle(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect>
    {
        int32_t __stdcall get_Color(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().Color());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Color(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Color(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ClampOutput(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ClampOutput(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ColorHdr(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().ColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ColorHdr(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ColorHdr(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ITintEffectStatics> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ITintEffectStatics>
    {
        int32_t __stdcall get_IsSupported(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect>
    {
        int32_t __stdcall get_InterpolationMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().InterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InterpolationMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InterpolationMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TransformMatrix(winrt::Windows::Foundation::Numerics::float3x2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3x2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3x2>(this->shim().TransformMatrix());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TransformMatrix(winrt::Windows::Foundation::Numerics::float3x2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TransformMatrix(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3x2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Sharpness(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Sharpness());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Sharpness(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Sharpness(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect>
    {
        int32_t __stdcall get_InterpolationMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().InterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InterpolationMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InterpolationMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BorderMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BorderMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BorderMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TransformMatrix(winrt::Windows::Foundation::Numerics::float4x4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4x4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4x4>(this->shim().TransformMatrix());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TransformMatrix(winrt::Windows::Foundation::Numerics::float4x4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TransformMatrix(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4x4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect>
    {
        int32_t __stdcall get_Offset(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().Offset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Offset(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Offset(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Size(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Size(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Size(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Frequency(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().Frequency());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Frequency(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Frequency(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Octaves(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().Octaves());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Octaves(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Octaves(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Seed(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().Seed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Seed(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Seed(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Noise(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise>(this->shim().Noise());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Noise(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Noise(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Tileable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Tileable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Tileable(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Tileable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect>
    {
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect>
    {
        int32_t __stdcall get_Color(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().Color());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Color(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Color(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Amount(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Amount(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Curve(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Curve());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Curve(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Curve(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ColorHdr(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().ColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ColorHdr(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ColorHdr(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** source) noexcept final try
        {
            clear_abi(source);
            typename D::abi_guard guard(this->shim());
            *source = detach_from<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Source(void* source) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<winrt::Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas::Effects
{
    inline AlphaMaskEffect::AlphaMaskEffect() :
        AlphaMaskEffect(impl::call_factory_cast<AlphaMaskEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), AlphaMaskEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<AlphaMaskEffect>(); }))
    {
    }
    inline auto AlphaMaskEffect::IsSupported()
    {
        return impl::call_factory_cast<bool(*)(IAlphaMaskEffectStatics const&), AlphaMaskEffect, IAlphaMaskEffectStatics>([](IAlphaMaskEffectStatics const& f) { return f.IsSupported(); });
    }
    inline ArithmeticCompositeEffect::ArithmeticCompositeEffect() :
        ArithmeticCompositeEffect(impl::call_factory_cast<ArithmeticCompositeEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), ArithmeticCompositeEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ArithmeticCompositeEffect>(); }))
    {
    }
    inline AtlasEffect::AtlasEffect() :
        AtlasEffect(impl::call_factory_cast<AtlasEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), AtlasEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<AtlasEffect>(); }))
    {
    }
    inline BlendEffect::BlendEffect() :
        BlendEffect(impl::call_factory_cast<BlendEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), BlendEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<BlendEffect>(); }))
    {
    }
    inline BorderEffect::BorderEffect() :
        BorderEffect(impl::call_factory_cast<BorderEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), BorderEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<BorderEffect>(); }))
    {
    }
    inline BrightnessEffect::BrightnessEffect() :
        BrightnessEffect(impl::call_factory_cast<BrightnessEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), BrightnessEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<BrightnessEffect>(); }))
    {
    }
    inline ChromaKeyEffect::ChromaKeyEffect() :
        ChromaKeyEffect(impl::call_factory_cast<ChromaKeyEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), ChromaKeyEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ChromaKeyEffect>(); }))
    {
    }
    inline ColorManagementEffect::ColorManagementEffect() :
        ColorManagementEffect(impl::call_factory_cast<ColorManagementEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), ColorManagementEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ColorManagementEffect>(); }))
    {
    }
    inline auto ColorManagementEffect::IsBestQualitySupported(winrt::Microsoft::Graphics::Canvas::CanvasDevice const& device)
    {
        return impl::call_factory<ColorManagementEffect, IColorManagementEffectStatics>([&](IColorManagementEffectStatics const& f) { return f.IsBestQualitySupported(device); });
    }
    inline ColorManagementProfile::ColorManagementProfile(winrt::Microsoft::Graphics::Canvas::CanvasColorSpace const& colorSpace) :
        ColorManagementProfile(impl::call_factory<ColorManagementProfile, IColorManagementProfileFactory>([&](IColorManagementProfileFactory const& f) { return f.Create(colorSpace); }))
    {
    }
    inline auto ColorManagementProfile::CreateCustom(array_view<uint8_t const> iccProfile)
    {
        return impl::call_factory<ColorManagementProfile, IColorManagementProfileStatics>([&](IColorManagementProfileStatics const& f) { return f.CreateCustom(iccProfile); });
    }
    inline auto ColorManagementProfile::CreateSimple(winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile const& simpleProfile)
    {
        return impl::call_factory<ColorManagementProfile, IColorManagementProfileStatics>([&](IColorManagementProfileStatics const& f) { return f.CreateSimple(simpleProfile); });
    }
    inline auto ColorManagementProfile::CreateExtended(winrt::Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace const& colorSpace)
    {
        return impl::call_factory<ColorManagementProfile, IColorManagementProfileStatics>([&](IColorManagementProfileStatics const& f) { return f.CreateExtended(colorSpace); });
    }
    inline auto ColorManagementProfile::IsSupported(winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType const& type, winrt::Microsoft::Graphics::Canvas::CanvasDevice const& device)
    {
        return impl::call_factory<ColorManagementProfile, IColorManagementProfileStatics>([&](IColorManagementProfileStatics const& f) { return f.IsSupported(type, device); });
    }
    inline ColorMatrixEffect::ColorMatrixEffect() :
        ColorMatrixEffect(impl::call_factory_cast<ColorMatrixEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), ColorMatrixEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ColorMatrixEffect>(); }))
    {
    }
    inline ColorSourceEffect::ColorSourceEffect() :
        ColorSourceEffect(impl::call_factory_cast<ColorSourceEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), ColorSourceEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ColorSourceEffect>(); }))
    {
    }
    inline CompositeEffect::CompositeEffect() :
        CompositeEffect(impl::call_factory_cast<CompositeEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), CompositeEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<CompositeEffect>(); }))
    {
    }
    inline ContrastEffect::ContrastEffect() :
        ContrastEffect(impl::call_factory_cast<ContrastEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), ContrastEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ContrastEffect>(); }))
    {
    }
    inline ConvolveMatrixEffect::ConvolveMatrixEffect() :
        ConvolveMatrixEffect(impl::call_factory_cast<ConvolveMatrixEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), ConvolveMatrixEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ConvolveMatrixEffect>(); }))
    {
    }
    inline CropEffect::CropEffect() :
        CropEffect(impl::call_factory_cast<CropEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), CropEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<CropEffect>(); }))
    {
    }
    inline CrossFadeEffect::CrossFadeEffect() :
        CrossFadeEffect(impl::call_factory_cast<CrossFadeEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), CrossFadeEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<CrossFadeEffect>(); }))
    {
    }
    inline auto CrossFadeEffect::IsSupported()
    {
        return impl::call_factory_cast<bool(*)(ICrossFadeEffectStatics const&), CrossFadeEffect, ICrossFadeEffectStatics>([](ICrossFadeEffectStatics const& f) { return f.IsSupported(); });
    }
    inline DirectionalBlurEffect::DirectionalBlurEffect() :
        DirectionalBlurEffect(impl::call_factory_cast<DirectionalBlurEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), DirectionalBlurEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<DirectionalBlurEffect>(); }))
    {
    }
    inline DiscreteTransferEffect::DiscreteTransferEffect() :
        DiscreteTransferEffect(impl::call_factory_cast<DiscreteTransferEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), DiscreteTransferEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<DiscreteTransferEffect>(); }))
    {
    }
    inline DisplacementMapEffect::DisplacementMapEffect() :
        DisplacementMapEffect(impl::call_factory_cast<DisplacementMapEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), DisplacementMapEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<DisplacementMapEffect>(); }))
    {
    }
    inline DistantDiffuseEffect::DistantDiffuseEffect() :
        DistantDiffuseEffect(impl::call_factory_cast<DistantDiffuseEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), DistantDiffuseEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<DistantDiffuseEffect>(); }))
    {
    }
    inline DistantSpecularEffect::DistantSpecularEffect() :
        DistantSpecularEffect(impl::call_factory_cast<DistantSpecularEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), DistantSpecularEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<DistantSpecularEffect>(); }))
    {
    }
    inline DpiCompensationEffect::DpiCompensationEffect() :
        DpiCompensationEffect(impl::call_factory_cast<DpiCompensationEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), DpiCompensationEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<DpiCompensationEffect>(); }))
    {
    }
    inline EdgeDetectionEffect::EdgeDetectionEffect() :
        EdgeDetectionEffect(impl::call_factory_cast<EdgeDetectionEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), EdgeDetectionEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<EdgeDetectionEffect>(); }))
    {
    }
    inline auto EffectTransferTable3D::CreateFromColors(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<winrt::Windows::UI::Color const> colors, int32_t sizeB, int32_t sizeG, int32_t sizeR)
    {
        return impl::call_factory<EffectTransferTable3D, IEffectTransferTable3DStatics>([&](IEffectTransferTable3DStatics const& f) { return f.CreateFromColors(resourceCreator, colors, sizeB, sizeG, sizeR); });
    }
    inline auto EffectTransferTable3D::CreateFromBytes(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<uint8_t const> bytes, int32_t sizeB, int32_t sizeG, int32_t sizeR, winrt::Windows::Graphics::DirectX::DirectXPixelFormat const& format)
    {
        return impl::call_factory<EffectTransferTable3D, IEffectTransferTable3DStatics>([&](IEffectTransferTable3DStatics const& f) { return f.CreateFromBytes(resourceCreator, bytes, sizeB, sizeG, sizeR, format); });
    }
    inline EmbossEffect::EmbossEffect() :
        EmbossEffect(impl::call_factory_cast<EmbossEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), EmbossEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<EmbossEffect>(); }))
    {
    }
    inline ExposureEffect::ExposureEffect() :
        ExposureEffect(impl::call_factory_cast<ExposureEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), ExposureEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ExposureEffect>(); }))
    {
    }
    inline GammaTransferEffect::GammaTransferEffect() :
        GammaTransferEffect(impl::call_factory_cast<GammaTransferEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), GammaTransferEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<GammaTransferEffect>(); }))
    {
    }
    inline GaussianBlurEffect::GaussianBlurEffect() :
        GaussianBlurEffect(impl::call_factory_cast<GaussianBlurEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), GaussianBlurEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<GaussianBlurEffect>(); }))
    {
    }
    inline GrayscaleEffect::GrayscaleEffect() :
        GrayscaleEffect(impl::call_factory_cast<GrayscaleEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), GrayscaleEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<GrayscaleEffect>(); }))
    {
    }
    inline HighlightsAndShadowsEffect::HighlightsAndShadowsEffect() :
        HighlightsAndShadowsEffect(impl::call_factory_cast<HighlightsAndShadowsEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), HighlightsAndShadowsEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<HighlightsAndShadowsEffect>(); }))
    {
    }
    inline HueRotationEffect::HueRotationEffect() :
        HueRotationEffect(impl::call_factory_cast<HueRotationEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), HueRotationEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<HueRotationEffect>(); }))
    {
    }
    inline HueToRgbEffect::HueToRgbEffect() :
        HueToRgbEffect(impl::call_factory_cast<HueToRgbEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), HueToRgbEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<HueToRgbEffect>(); }))
    {
    }
    inline InvertEffect::InvertEffect() :
        InvertEffect(impl::call_factory_cast<InvertEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), InvertEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<InvertEffect>(); }))
    {
    }
    inline LinearTransferEffect::LinearTransferEffect() :
        LinearTransferEffect(impl::call_factory_cast<LinearTransferEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), LinearTransferEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<LinearTransferEffect>(); }))
    {
    }
    inline LuminanceToAlphaEffect::LuminanceToAlphaEffect() :
        LuminanceToAlphaEffect(impl::call_factory_cast<LuminanceToAlphaEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), LuminanceToAlphaEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<LuminanceToAlphaEffect>(); }))
    {
    }
    inline MorphologyEffect::MorphologyEffect() :
        MorphologyEffect(impl::call_factory_cast<MorphologyEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), MorphologyEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<MorphologyEffect>(); }))
    {
    }
    inline OpacityEffect::OpacityEffect() :
        OpacityEffect(impl::call_factory_cast<OpacityEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), OpacityEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<OpacityEffect>(); }))
    {
    }
    inline auto OpacityEffect::IsSupported()
    {
        return impl::call_factory_cast<bool(*)(IOpacityEffectStatics const&), OpacityEffect, IOpacityEffectStatics>([](IOpacityEffectStatics const& f) { return f.IsSupported(); });
    }
    inline OpacityMetadataEffect::OpacityMetadataEffect() :
        OpacityMetadataEffect(impl::call_factory_cast<OpacityMetadataEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), OpacityMetadataEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<OpacityMetadataEffect>(); }))
    {
    }
    inline PixelShaderEffect::PixelShaderEffect(array_view<uint8_t const> shaderCode) :
        PixelShaderEffect(impl::call_factory<PixelShaderEffect, IPixelShaderEffectFactory>([&](IPixelShaderEffectFactory const& f) { return f.Create(shaderCode); }))
    {
    }
    inline PointDiffuseEffect::PointDiffuseEffect() :
        PointDiffuseEffect(impl::call_factory_cast<PointDiffuseEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), PointDiffuseEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<PointDiffuseEffect>(); }))
    {
    }
    inline PointSpecularEffect::PointSpecularEffect() :
        PointSpecularEffect(impl::call_factory_cast<PointSpecularEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), PointSpecularEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<PointSpecularEffect>(); }))
    {
    }
    inline PosterizeEffect::PosterizeEffect() :
        PosterizeEffect(impl::call_factory_cast<PosterizeEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), PosterizeEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<PosterizeEffect>(); }))
    {
    }
    inline PremultiplyEffect::PremultiplyEffect() :
        PremultiplyEffect(impl::call_factory_cast<PremultiplyEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), PremultiplyEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<PremultiplyEffect>(); }))
    {
    }
    inline RgbToHueEffect::RgbToHueEffect() :
        RgbToHueEffect(impl::call_factory_cast<RgbToHueEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), RgbToHueEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<RgbToHueEffect>(); }))
    {
    }
    inline SaturationEffect::SaturationEffect() :
        SaturationEffect(impl::call_factory_cast<SaturationEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), SaturationEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<SaturationEffect>(); }))
    {
    }
    inline ScaleEffect::ScaleEffect() :
        ScaleEffect(impl::call_factory_cast<ScaleEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), ScaleEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ScaleEffect>(); }))
    {
    }
    inline SepiaEffect::SepiaEffect() :
        SepiaEffect(impl::call_factory_cast<SepiaEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), SepiaEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<SepiaEffect>(); }))
    {
    }
    inline ShadowEffect::ShadowEffect() :
        ShadowEffect(impl::call_factory_cast<ShadowEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), ShadowEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ShadowEffect>(); }))
    {
    }
    inline SharpenEffect::SharpenEffect() :
        SharpenEffect(impl::call_factory_cast<SharpenEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), SharpenEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<SharpenEffect>(); }))
    {
    }
    inline SpotDiffuseEffect::SpotDiffuseEffect() :
        SpotDiffuseEffect(impl::call_factory_cast<SpotDiffuseEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), SpotDiffuseEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<SpotDiffuseEffect>(); }))
    {
    }
    inline SpotSpecularEffect::SpotSpecularEffect() :
        SpotSpecularEffect(impl::call_factory_cast<SpotSpecularEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), SpotSpecularEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<SpotSpecularEffect>(); }))
    {
    }
    inline StraightenEffect::StraightenEffect() :
        StraightenEffect(impl::call_factory_cast<StraightenEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), StraightenEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<StraightenEffect>(); }))
    {
    }
    inline TableTransfer3DEffect::TableTransfer3DEffect() :
        TableTransfer3DEffect(impl::call_factory_cast<TableTransfer3DEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), TableTransfer3DEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<TableTransfer3DEffect>(); }))
    {
    }
    inline TableTransferEffect::TableTransferEffect() :
        TableTransferEffect(impl::call_factory_cast<TableTransferEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), TableTransferEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<TableTransferEffect>(); }))
    {
    }
    inline TemperatureAndTintEffect::TemperatureAndTintEffect() :
        TemperatureAndTintEffect(impl::call_factory_cast<TemperatureAndTintEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), TemperatureAndTintEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<TemperatureAndTintEffect>(); }))
    {
    }
    inline TileEffect::TileEffect() :
        TileEffect(impl::call_factory_cast<TileEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), TileEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<TileEffect>(); }))
    {
    }
    inline TintEffect::TintEffect() :
        TintEffect(impl::call_factory_cast<TintEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), TintEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<TintEffect>(); }))
    {
    }
    inline auto TintEffect::IsSupported()
    {
        return impl::call_factory_cast<bool(*)(ITintEffectStatics const&), TintEffect, ITintEffectStatics>([](ITintEffectStatics const& f) { return f.IsSupported(); });
    }
    inline Transform2DEffect::Transform2DEffect() :
        Transform2DEffect(impl::call_factory_cast<Transform2DEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), Transform2DEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<Transform2DEffect>(); }))
    {
    }
    inline Transform3DEffect::Transform3DEffect() :
        Transform3DEffect(impl::call_factory_cast<Transform3DEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), Transform3DEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<Transform3DEffect>(); }))
    {
    }
    inline TurbulenceEffect::TurbulenceEffect() :
        TurbulenceEffect(impl::call_factory_cast<TurbulenceEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), TurbulenceEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<TurbulenceEffect>(); }))
    {
    }
    inline UnPremultiplyEffect::UnPremultiplyEffect() :
        UnPremultiplyEffect(impl::call_factory_cast<UnPremultiplyEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), UnPremultiplyEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<UnPremultiplyEffect>(); }))
    {
    }
    inline VignetteEffect::VignetteEffect() :
        VignetteEffect(impl::call_factory_cast<VignetteEffect(*)(winrt::Windows::Foundation::IActivationFactory const&), VignetteEffect>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<VignetteEffect>(); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffectStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IAtlasEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IBlendEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IBorderEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffectStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorSourceEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ICompositeEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IContrastEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ICropEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffectStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IEmbossEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IExposureEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IHueRotationEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IInvertEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffectStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffectFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ISaturationEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ISepiaEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ISharpenEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITileEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITintEffectStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::AlphaMaskEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ArithmeticCompositeEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::AtlasEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::BlendEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::BorderEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::BrightnessEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ChromaKeyEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ColorMatrixEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ColorSourceEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::CompositeEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ContrastEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ConvolveMatrixEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::CropEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::CrossFadeEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::DirectionalBlurEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::DiscreteTransferEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::DisplacementMapEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::DistantDiffuseEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::DistantSpecularEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::DpiCompensationEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::EmbossEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ExposureEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::GammaTransferEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::GaussianBlurEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::GrayscaleEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::HighlightsAndShadowsEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::HueRotationEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::HueToRgbEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::InvertEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::LinearTransferEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::LuminanceToAlphaEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::MorphologyEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::OpacityEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::OpacityMetadataEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::PixelShaderEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::PointDiffuseEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::PointSpecularEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::PosterizeEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::PremultiplyEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::RgbToHueEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::SaturationEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ScaleEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::SepiaEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ShadowEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::SharpenEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::SpotDiffuseEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::SpotSpecularEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::StraightenEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::TableTransfer3DEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::TableTransferEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::TemperatureAndTintEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::TileEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::TintEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::Transform2DEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::Transform3DEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::TurbulenceEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::UnPremultiplyEffect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::VignetteEffect> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
