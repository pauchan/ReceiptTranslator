// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220531.1

#pragma once
#ifndef WINRT_Microsoft_Graphics_Canvas_Svg_H
#define WINRT_Microsoft_Graphics_Canvas_Svg_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.220531.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.220531.1"
#include "winrt/Microsoft.Graphics.Canvas.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.2.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.Geometry.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Numerics.2.h"
#include "winrt/impl/Windows.Storage.Streams.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.Svg.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute<D>::Clone() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute)->Clone(&result));
        return winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute<D>::GetElement() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute)->GetElement(&value));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute<D>::Device() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute)->get_Device(&value));
        return winrt::Microsoft::Graphics::Canvas::CanvasDevice{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::Device() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->get_Device(&value));
        return winrt::Microsoft::Graphics::Canvas::CanvasDevice{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::GetXml() const
    {
        void* xmlString{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->GetXml(&xmlString));
        return hstring{ xmlString, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::SaveAsync(winrt::Windows::Storage::Streams::IRandomAccessStream const& stream) const
    {
        void* asyncAction{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->SaveAsync(*(void**)(&stream), &asyncAction));
        return winrt::Windows::Foundation::IAsyncAction{ asyncAction, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::Root(winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->put_Root(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::Root() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->get_Root(&value));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::FindElementById(param::hstring const& id) const
    {
        void* element{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->FindElementById(*(void**)(&id), &element));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement{ element, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::CreatePaintAttribute() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->CreatePaintAttributeWithDefaults(&result));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintAttribute{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::CreatePaintAttribute(winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintType const& paintType, winrt::Windows::UI::Color const& color, param::hstring const& id) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->CreatePaintAttribute(static_cast<int32_t>(paintType), impl::bind_in(color), *(void**)(&id), &result));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintAttribute{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::CreatePathAttribute() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->CreatePathAttributeWithDefaults(&result));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathAttribute{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::CreatePathAttribute(array_view<float const> segmentData, array_view<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand const> commands) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->CreatePathAttribute(segmentData.size(), get_abi(segmentData), commands.size(), get_abi(commands), &result));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathAttribute{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::CreatePointsAttribute() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->CreatePointsAttributeWithDefaults(&result));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPointsAttribute{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::CreatePointsAttribute(array_view<winrt::Windows::Foundation::Numerics::float2 const> points) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->CreatePointsAttribute(points.size(), get_abi(points), &result));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPointsAttribute{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::CreateStrokeDashArrayAttribute() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->CreateStrokeDashArrayAttributeWithDefaults(&result));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgStrokeDashArrayAttribute{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::CreateStrokeDashArrayAttribute(array_view<float const> dashValues, array_view<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits const> unitValues) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->CreateStrokeDashArrayAttribute(dashValues.size(), get_abi(dashValues), unitValues.size(), get_abi(unitValues), &result));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgStrokeDashArrayAttribute{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::LoadElementFromXml(param::hstring const& xmlString) const
    {
        void* svgElement{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->LoadElementFromXml(*(void**)(&xmlString), &svgElement));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement{ svgElement, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument<D>::LoadElementAsync(winrt::Windows::Storage::Streams::IRandomAccessStream const& stream) const
    {
        void* svgElement{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument)->LoadElementAsync(*(void**)(&stream), &svgElement));
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement>{ svgElement, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentFactory<D>::CreateEmpty(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator) const
    {
        void* canvasSvgDocument{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentFactory)->CreateEmpty(*(void**)(&resourceCreator), &canvasSvgDocument));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument{ canvasSvgDocument, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentStatics<D>::LoadFromXml(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& xmlString) const
    {
        void* svgDocument{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentStatics)->LoadFromXml(*(void**)(&resourceCreator), *(void**)(&xmlString), &svgDocument));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument{ svgDocument, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentStatics<D>::LoadAsync(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, winrt::Windows::Storage::Streams::IRandomAccessStream const& stream) const
    {
        void* svgDocument{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentStatics)->LoadAsync(*(void**)(&resourceCreator), *(void**)(&stream), &svgDocument));
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument>{ svgDocument, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentStatics<D>::IsSupported(winrt::Microsoft::Graphics::Canvas::CanvasDevice const& device) const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentStatics)->IsSupported(*(void**)(&device), &value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgElement<D>::ContainingDocument() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement)->get_ContainingDocument(&value));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgElement<D>::Parent() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement)->get_Parent(&value));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgElement<D>::Device() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement)->get_Device(&value));
        return winrt::Microsoft::Graphics::Canvas::CanvasDevice{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::AppendChild(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const& child) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->AppendChild(*(void**)(&child)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::CreateAndAppendNamedChildElement(param::hstring const& childName) const
    {
        void* childElement{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->CreateAndAppendNamedChildElement(*(void**)(&childName), &childElement));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement{ childElement, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::CreateAndAppendTextChildElement(param::hstring const& textContent) const
    {
        void* childElement{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->CreateAndAppendTextChildElement(*(void**)(&textContent), &childElement));
        return winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgTextElement{ childElement, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::FirstChild() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->get_FirstChild(&value));
        return winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::LastChild() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->get_LastChild(&value));
        return winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetPreviousSibling(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const& child) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetPreviousSibling(*(void**)(&child), &value));
        return winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetNextSibling(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const& child) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetNextSibling(*(void**)(&child), &value));
        return winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SpecifiedAttributes() const
    {
        uint32_t valueElements_impl_size{};
        void** valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->get_SpecifiedAttributes(&valueElements_impl_size, &valueElements));
        return com_array<hstring>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::Tag() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->get_Tag(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::HasChildren() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->get_HasChildren(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::InsertChildBefore(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const& child, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const& referenceChild) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->InsertChildBefore(*(void**)(&child), *(void**)(&referenceChild)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::IsAttributeSpecified(param::hstring const& attributeName) const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->IsAttributeSpecified(*(void**)(&attributeName), &value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::IsAttributeSpecified(param::hstring const& attributeName, bool inherited) const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->IsAttributeSpecifiedWithInherhited(*(void**)(&attributeName), inherited, &value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::RemoveAttribute(param::hstring const& attributeName) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->RemoveAttribute(*(void**)(&attributeName)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::RemoveChild(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const& child) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->RemoveChild(*(void**)(&child)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::ReplaceChild(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const& newChild, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const& oldChild) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->ReplaceChild(*(void**)(&newChild), *(void**)(&oldChild)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetStringAttribute(param::hstring const& attributeName, param::hstring const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetStringAttribute(*(void**)(&attributeName), *(void**)(&attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetStringAttribute(param::hstring const& attributeName) const
    {
        void* attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetStringAttribute(*(void**)(&attributeName), &attributeValue));
        return hstring{ attributeValue, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetAttribute(param::hstring const& attributeName, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetAttribute(*(void**)(&attributeName), *(void**)(&attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetAttribute(param::hstring const& attributeName) const
    {
        void* attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetAttribute(*(void**)(&attributeName), &attributeValue));
        return winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute{ attributeValue, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetIdAttribute(param::hstring const& attributeName, param::hstring const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetIdAttribute(*(void**)(&attributeName), *(void**)(&attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetIdAttribute(param::hstring const& attributeName) const
    {
        void* attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetIdAttribute(*(void**)(&attributeName), &attributeValue));
        return hstring{ attributeValue, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetFloatAttribute(param::hstring const& attributeName, float attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetFloatAttribute(*(void**)(&attributeName), attributeValue));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetFloatAttribute(param::hstring const& attributeName) const
    {
        float attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetFloatAttribute(*(void**)(&attributeName), &attributeValue));
        return attributeValue;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetColorAttribute(param::hstring const& attributeName, winrt::Windows::UI::Color const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetColorAttribute(*(void**)(&attributeName), impl::bind_in(attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetColorAttribute(param::hstring const& attributeName) const
    {
        winrt::Windows::UI::Color attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetColorAttribute(*(void**)(&attributeName), put_abi(attributeValue)));
        return attributeValue;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetFilledRegionDeterminationAttribute(param::hstring const& attributeName, winrt::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetFilledRegionDeterminationAttribute(*(void**)(&attributeName), static_cast<int32_t>(attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetFilledRegionDeterminationAttribute(param::hstring const& attributeName) const
    {
        winrt::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetFilledRegionDeterminationAttribute(*(void**)(&attributeName), reinterpret_cast<int32_t*>(&attributeValue)));
        return attributeValue;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetDisplayAttribute(param::hstring const& attributeName, winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDisplay const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetDisplayAttribute(*(void**)(&attributeName), static_cast<int32_t>(attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetDisplayAttribute(param::hstring const& attributeName) const
    {
        winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDisplay attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetDisplayAttribute(*(void**)(&attributeName), reinterpret_cast<int32_t*>(&attributeValue)));
        return attributeValue;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetOverflowAttribute(param::hstring const& attributeName, winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgOverflow const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetOverflowAttribute(*(void**)(&attributeName), static_cast<int32_t>(attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetOverflowAttribute(param::hstring const& attributeName) const
    {
        winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgOverflow attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetOverflowAttribute(*(void**)(&attributeName), reinterpret_cast<int32_t*>(&attributeValue)));
        return attributeValue;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetCapStyleAttribute(param::hstring const& attributeName, winrt::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetCapStyleAttribute(*(void**)(&attributeName), static_cast<int32_t>(attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetCapStyleAttribute(param::hstring const& attributeName) const
    {
        winrt::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetCapStyleAttribute(*(void**)(&attributeName), reinterpret_cast<int32_t*>(&attributeValue)));
        return attributeValue;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetLineJoinAttribute(param::hstring const& attributeName, winrt::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetLineJoinAttribute(*(void**)(&attributeName), static_cast<int32_t>(attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetLineJoinAttribute(param::hstring const& attributeName) const
    {
        winrt::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetLineJoinAttribute(*(void**)(&attributeName), reinterpret_cast<int32_t*>(&attributeValue)));
        return attributeValue;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetVisibilityAttribute(param::hstring const& attributeName, winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgVisibility const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetVisibilityAttribute(*(void**)(&attributeName), static_cast<int32_t>(attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetVisibilityAttribute(param::hstring const& attributeName) const
    {
        winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgVisibility attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetVisibilityAttribute(*(void**)(&attributeName), reinterpret_cast<int32_t*>(&attributeValue)));
        return attributeValue;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetTransformAttribute(param::hstring const& attributeName, winrt::Windows::Foundation::Numerics::float3x2 const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetTransformAttribute(*(void**)(&attributeName), impl::bind_in(attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetTransformAttribute(param::hstring const& attributeName) const
    {
        winrt::Windows::Foundation::Numerics::float3x2 attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetTransformAttribute(*(void**)(&attributeName), put_abi(attributeValue)));
        return attributeValue;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetUnitsAttribute(param::hstring const& attributeName, winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgUnits const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetUnitsAttribute(*(void**)(&attributeName), static_cast<int32_t>(attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetUnitsAttribute(param::hstring const& attributeName) const
    {
        winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgUnits attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetUnitsAttribute(*(void**)(&attributeName), reinterpret_cast<int32_t*>(&attributeValue)));
        return attributeValue;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetEdgeBehaviorAttribute(param::hstring const& attributeName, winrt::Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetEdgeBehaviorAttribute(*(void**)(&attributeName), static_cast<int32_t>(attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetEdgeBehaviorAttribute(param::hstring const& attributeName) const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasEdgeBehavior attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetEdgeBehaviorAttribute(*(void**)(&attributeName), reinterpret_cast<int32_t*>(&attributeValue)));
        return attributeValue;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetRectangleAttribute(param::hstring const& attributeName, winrt::Windows::Foundation::Rect const& attributeValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetRectangleAttribute(*(void**)(&attributeName), impl::bind_in(attributeValue)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetRectangleAttribute(param::hstring const& attributeName) const
    {
        winrt::Windows::Foundation::Rect attributeValue{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetRectangleAttribute(*(void**)(&attributeName), put_abi(attributeValue)));
        return attributeValue;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetLengthAttribute(param::hstring const& attributeName, float value, winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits const& units) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetLengthAttribute(*(void**)(&attributeName), value, static_cast<int32_t>(units)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetLengthAttribute(param::hstring const& attributeName, winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits& units) const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetLengthAttribute(*(void**)(&attributeName), reinterpret_cast<int32_t*>(&units), &value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::SetAspectRatioAttribute(param::hstring const& attributeName, winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectAlignment const& alignment, winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectScaling const& meetOrSlice) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->SetAspectRatioAttribute(*(void**)(&attributeName), static_cast<int32_t>(alignment), static_cast<int32_t>(meetOrSlice)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement<D>::GetAspectRatioAttribute(param::hstring const& attributeName, winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectScaling& meetOrSlice) const
    {
        winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectAlignment alignment{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement)->GetAspectRatioAttribute(*(void**)(&attributeName), reinterpret_cast<int32_t*>(&meetOrSlice), reinterpret_cast<int32_t*>(&alignment)));
        return alignment;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPaintAttribute<D>::PaintType(winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintType const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute)->put_PaintType(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPaintAttribute<D>::PaintType() const
    {
        winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute)->get_PaintType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPaintAttribute<D>::Color(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute)->put_Color(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPaintAttribute<D>::Color() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute)->get_Color(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPaintAttribute<D>::Id(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute)->put_Id(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPaintAttribute<D>::Id() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute)->get_Id(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute<D>::CreatePathGeometry() const
    {
        void* outputGeometry{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute)->CreatePathGeometry(&outputGeometry));
        return winrt::Microsoft::Graphics::Canvas::Geometry::CanvasGeometry{ outputGeometry, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute<D>::CreatePathGeometry(winrt::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination const& fill) const
    {
        void* outputGeometry{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute)->CreatePathGeometryWithFill(static_cast<int32_t>(fill), &outputGeometry));
        return winrt::Microsoft::Graphics::Canvas::Geometry::CanvasGeometry{ outputGeometry, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute<D>::Commands() const
    {
        uint32_t valueElements_impl_size{};
        int32_t* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute)->get_Commands(&valueElements_impl_size, &valueElements));
        return com_array<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute<D>::GetCommands(int32_t startIndex, int32_t elementCount) const
    {
        uint32_t outputValueElements_impl_size{};
        int32_t* outputValueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute)->GetCommands(startIndex, elementCount, &outputValueElements_impl_size, &outputValueElements));
        return com_array<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand>{ outputValueElements, outputValueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute<D>::SegmentData() const
    {
        uint32_t valueElements_impl_size{};
        float* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute)->get_SegmentData(&valueElements_impl_size, &valueElements));
        return com_array<float>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute<D>::GetSegmentData(int32_t startIndex, int32_t elementCount) const
    {
        uint32_t outputValueElements_impl_size{};
        float* outputValueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute)->GetSegmentData(startIndex, elementCount, &outputValueElements_impl_size, &outputValueElements));
        return com_array<float>{ outputValueElements, outputValueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute<D>::RemoveCommandsAtEnd(int32_t commandsCount) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute)->RemoveCommandsAtEnd(commandsCount));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute<D>::RemoveSegmentDataAtEnd(int32_t commandsCount) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute)->RemoveSegmentDataAtEnd(commandsCount));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute<D>::SetCommands(int32_t startIndex, array_view<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand const> commands) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute)->SetCommands(startIndex, commands.size(), get_abi(commands)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute<D>::SetSegmentData(int32_t startIndex, array_view<float const> segmentData) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute)->SetSegmentData(startIndex, segmentData.size(), get_abi(segmentData)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPointsAttribute<D>::Points() const
    {
        uint32_t valueElements_impl_size{};
        winrt::Windows::Foundation::Numerics::float2* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute)->get_Points(&valueElements_impl_size, &valueElements));
        return com_array<winrt::Windows::Foundation::Numerics::float2>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPointsAttribute<D>::GetPoints(int32_t startIndex, int32_t elementCount) const
    {
        uint32_t outputValueElements_impl_size{};
        winrt::Windows::Foundation::Numerics::float2* outputValueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute)->GetPoints(startIndex, elementCount, &outputValueElements_impl_size, &outputValueElements));
        return com_array<winrt::Windows::Foundation::Numerics::float2>{ outputValueElements, outputValueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPointsAttribute<D>::RemovePointsAtEnd(int32_t pointCount) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute)->RemovePointsAtEnd(pointCount));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPointsAttribute<D>::SetPoints(int32_t startIndex, array_view<winrt::Windows::Foundation::Numerics::float2 const> points) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute)->SetPoints(startIndex, points.size(), get_abi(points)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgStrokeDashArrayAttribute<D>::GetDashes() const
    {
        uint32_t valueElements_impl_size{};
        float* valueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute)->GetDashes(&valueElements_impl_size, &valueElements));
        return com_array<float>{ valueElements, valueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgStrokeDashArrayAttribute<D>::GetDashes(int32_t startIndex, int32_t elementCount, com_array<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits>& outputUnitsElements) const
    {
        uint32_t outputValueElements_impl_size{};
        float* outputValueElements{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute)->GetDashesWithUnits(startIndex, elementCount, impl::put_size_abi(outputUnitsElements), put_abi(outputUnitsElements), &outputValueElements_impl_size, &outputValueElements));
        return com_array<float>{ outputValueElements, outputValueElements_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgStrokeDashArrayAttribute<D>::RemoveDashesAtEnd(int32_t dashCount) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute)->RemoveDashesAtEnd(dashCount));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgStrokeDashArrayAttribute<D>::SetDashes(int32_t startIndex, array_view<float const> dashes) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute)->SetDashes(startIndex, dashes.size(), get_abi(dashes)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgStrokeDashArrayAttribute<D>::SetDashes(int32_t startIndex, array_view<float const> dashes, winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits const& units) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute)->SetDashesWithUnit(startIndex, dashes.size(), get_abi(dashes), static_cast<int32_t>(units)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgStrokeDashArrayAttribute<D>::SetDashes(int32_t startIndex, array_view<float const> dashValues, array_view<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits const> unitValues) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute)->SetDashesWithUnits(startIndex, dashValues.size(), get_abi(dashValues), unitValues.size(), get_abi(unitValues)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgTextElement<D>::Text(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgTextElement)->put_Text(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_Svg_ICanvasSvgTextElement<D>::Text() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgTextElement)->get_Text(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute>
    {
        int32_t __stdcall Clone(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute>(this->shim().Clone());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetElement(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement>(this->shim().GetElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Device(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument>
    {
        int32_t __stdcall get_Device(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetXml(void** xmlString) noexcept final try
        {
            clear_abi(xmlString);
            typename D::abi_guard guard(this->shim());
            *xmlString = detach_from<hstring>(this->shim().GetXml());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SaveAsync(void* stream, void** asyncAction) noexcept final try
        {
            clear_abi(asyncAction);
            typename D::abi_guard guard(this->shim());
            *asyncAction = detach_from<winrt::Windows::Foundation::IAsyncAction>(this->shim().SaveAsync(*reinterpret_cast<winrt::Windows::Storage::Streams::IRandomAccessStream const*>(&stream)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Root(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Root(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Root(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement>(this->shim().Root());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FindElementById(void* id, void** element) noexcept final try
        {
            clear_abi(element);
            typename D::abi_guard guard(this->shim());
            *element = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement>(this->shim().FindElementById(*reinterpret_cast<hstring const*>(&id)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreatePaintAttributeWithDefaults(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintAttribute>(this->shim().CreatePaintAttribute());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreatePaintAttribute(int32_t paintType, struct struct_Windows_UI_Color color, void* id, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintAttribute>(this->shim().CreatePaintAttribute(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintType const*>(&paintType), *reinterpret_cast<winrt::Windows::UI::Color const*>(&color), *reinterpret_cast<hstring const*>(&id)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreatePathAttributeWithDefaults(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathAttribute>(this->shim().CreatePathAttribute());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreatePathAttribute(uint32_t __segmentDataSize, float* segmentData, uint32_t __commandsSize, int32_t* commands, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathAttribute>(this->shim().CreatePathAttribute(array_view<float const>(reinterpret_cast<float const *>(segmentData), reinterpret_cast<float const *>(segmentData) + __segmentDataSize), array_view<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand const>(reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand const *>(commands), reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand const *>(commands) + __commandsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreatePointsAttributeWithDefaults(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPointsAttribute>(this->shim().CreatePointsAttribute());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreatePointsAttribute(uint32_t __pointsSize, winrt::Windows::Foundation::Numerics::float2* points, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPointsAttribute>(this->shim().CreatePointsAttribute(array_view<winrt::Windows::Foundation::Numerics::float2 const>(reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const *>(points), reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const *>(points) + __pointsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateStrokeDashArrayAttributeWithDefaults(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgStrokeDashArrayAttribute>(this->shim().CreateStrokeDashArrayAttribute());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateStrokeDashArrayAttribute(uint32_t __dashValuesSize, float* dashValues, uint32_t __unitValuesSize, int32_t* unitValues, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgStrokeDashArrayAttribute>(this->shim().CreateStrokeDashArrayAttribute(array_view<float const>(reinterpret_cast<float const *>(dashValues), reinterpret_cast<float const *>(dashValues) + __dashValuesSize), array_view<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits const>(reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits const *>(unitValues), reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits const *>(unitValues) + __unitValuesSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall LoadElementFromXml(void* xmlString, void** svgElement) noexcept final try
        {
            clear_abi(svgElement);
            typename D::abi_guard guard(this->shim());
            *svgElement = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement>(this->shim().LoadElementFromXml(*reinterpret_cast<hstring const*>(&xmlString)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall LoadElementAsync(void* stream, void** svgElement) noexcept final try
        {
            clear_abi(svgElement);
            typename D::abi_guard guard(this->shim());
            *svgElement = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement>>(this->shim().LoadElementAsync(*reinterpret_cast<winrt::Windows::Storage::Streams::IRandomAccessStream const*>(&stream)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentFactory> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentFactory>
    {
        int32_t __stdcall CreateEmpty(void* resourceCreator, void** canvasSvgDocument) noexcept final try
        {
            clear_abi(canvasSvgDocument);
            typename D::abi_guard guard(this->shim());
            *canvasSvgDocument = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument>(this->shim().CreateEmpty(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentStatics> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentStatics>
    {
        int32_t __stdcall LoadFromXml(void* resourceCreator, void* xmlString, void** svgDocument) noexcept final try
        {
            clear_abi(svgDocument);
            typename D::abi_guard guard(this->shim());
            *svgDocument = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument>(this->shim().LoadFromXml(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<hstring const*>(&xmlString)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall LoadAsync(void* resourceCreator, void* stream, void** svgDocument) noexcept final try
        {
            clear_abi(svgDocument);
            typename D::abi_guard guard(this->shim());
            *svgDocument = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument>>(this->shim().LoadAsync(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<winrt::Windows::Storage::Streams::IRandomAccessStream const*>(&stream)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSupported(void* device, bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSupported(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement>
    {
        int32_t __stdcall get_ContainingDocument(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument>(this->shim().ContainingDocument());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Parent(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement>(this->shim().Parent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Device(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement>
    {
        int32_t __stdcall AppendChild(void* child) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AppendChild(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const*>(&child));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateAndAppendNamedChildElement(void* childName, void** childElement) noexcept final try
        {
            clear_abi(childElement);
            typename D::abi_guard guard(this->shim());
            *childElement = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement>(this->shim().CreateAndAppendNamedChildElement(*reinterpret_cast<hstring const*>(&childName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateAndAppendTextChildElement(void* textContent, void** childElement) noexcept final try
        {
            clear_abi(childElement);
            typename D::abi_guard guard(this->shim());
            *childElement = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgTextElement>(this->shim().CreateAndAppendTextChildElement(*reinterpret_cast<hstring const*>(&textContent)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FirstChild(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement>(this->shim().FirstChild());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LastChild(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement>(this->shim().LastChild());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetPreviousSibling(void* child, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement>(this->shim().GetPreviousSibling(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const*>(&child)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetNextSibling(void* child, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement>(this->shim().GetNextSibling(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const*>(&child)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SpecifiedAttributes(uint32_t* __valueElementsSize, void*** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().SpecifiedAttributes());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Tag(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Tag());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HasChildren(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().HasChildren());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall InsertChildBefore(void* child, void* referenceChild) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InsertChildBefore(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const*>(&child), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const*>(&referenceChild));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsAttributeSpecified(void* attributeName, bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsAttributeSpecified(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsAttributeSpecifiedWithInherhited(void* attributeName, bool inherited, bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsAttributeSpecified(*reinterpret_cast<hstring const*>(&attributeName), inherited));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveAttribute(void* attributeName) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveAttribute(*reinterpret_cast<hstring const*>(&attributeName));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveChild(void* child) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveChild(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const*>(&child));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ReplaceChild(void* newChild, void* oldChild) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ReplaceChild(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const*>(&newChild), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement const*>(&oldChild));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetStringAttribute(void* attributeName, void* attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetStringAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<hstring const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStringAttribute(void* attributeName, void** attributeValue) noexcept final try
        {
            clear_abi(attributeValue);
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<hstring>(this->shim().GetStringAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetAttribute(void* attributeName, void* attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAttribute(void* attributeName, void** attributeValue) noexcept final try
        {
            clear_abi(attributeValue);
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute>(this->shim().GetAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetIdAttribute(void* attributeName, void* attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetIdAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<hstring const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIdAttribute(void* attributeName, void** attributeValue) noexcept final try
        {
            clear_abi(attributeValue);
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<hstring>(this->shim().GetIdAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetFloatAttribute(void* attributeName, float attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetFloatAttribute(*reinterpret_cast<hstring const*>(&attributeName), attributeValue);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFloatAttribute(void* attributeName, float* attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<float>(this->shim().GetFloatAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetColorAttribute(void* attributeName, struct struct_Windows_UI_Color attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetColorAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Windows::UI::Color const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetColorAttribute(void* attributeName, struct struct_Windows_UI_Color* attributeValue) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(attributeValue);
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<winrt::Windows::UI::Color>(this->shim().GetColorAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetFilledRegionDeterminationAttribute(void* attributeName, int32_t attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetFilledRegionDeterminationAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFilledRegionDeterminationAttribute(void* attributeName, int32_t* attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<winrt::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination>(this->shim().GetFilledRegionDeterminationAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetDisplayAttribute(void* attributeName, int32_t attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetDisplayAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDisplay const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDisplayAttribute(void* attributeName, int32_t* attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDisplay>(this->shim().GetDisplayAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetOverflowAttribute(void* attributeName, int32_t attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetOverflowAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgOverflow const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetOverflowAttribute(void* attributeName, int32_t* attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgOverflow>(this->shim().GetOverflowAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetCapStyleAttribute(void* attributeName, int32_t attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetCapStyleAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCapStyleAttribute(void* attributeName, int32_t* attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<winrt::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle>(this->shim().GetCapStyleAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetLineJoinAttribute(void* attributeName, int32_t attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetLineJoinAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLineJoinAttribute(void* attributeName, int32_t* attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<winrt::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin>(this->shim().GetLineJoinAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetVisibilityAttribute(void* attributeName, int32_t attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetVisibilityAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgVisibility const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetVisibilityAttribute(void* attributeName, int32_t* attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgVisibility>(this->shim().GetVisibilityAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetTransformAttribute(void* attributeName, winrt::Windows::Foundation::Numerics::float3x2 attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetTransformAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Windows::Foundation::Numerics::float3x2 const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTransformAttribute(void* attributeName, winrt::Windows::Foundation::Numerics::float3x2* attributeValue) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3x2>(attributeValue);
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<winrt::Windows::Foundation::Numerics::float3x2>(this->shim().GetTransformAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetUnitsAttribute(void* attributeName, int32_t attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetUnitsAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgUnits const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetUnitsAttribute(void* attributeName, int32_t* attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgUnits>(this->shim().GetUnitsAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetEdgeBehaviorAttribute(void* attributeName, int32_t attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetEdgeBehaviorAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetEdgeBehaviorAttribute(void* attributeName, int32_t* attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasEdgeBehavior>(this->shim().GetEdgeBehaviorAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetRectangleAttribute(void* attributeName, winrt::Windows::Foundation::Rect attributeValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetRectangleAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&attributeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRectangleAttribute(void* attributeName, winrt::Windows::Foundation::Rect* attributeValue) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(attributeValue);
            typename D::abi_guard guard(this->shim());
            *attributeValue = detach_from<winrt::Windows::Foundation::Rect>(this->shim().GetRectangleAttribute(*reinterpret_cast<hstring const*>(&attributeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetLengthAttribute(void* attributeName, float value, int32_t units) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetLengthAttribute(*reinterpret_cast<hstring const*>(&attributeName), value, *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits const*>(&units));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLengthAttribute(void* attributeName, int32_t* units, float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().GetLengthAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits*>(units)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetAspectRatioAttribute(void* attributeName, int32_t alignment, int32_t meetOrSlice) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAspectRatioAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectAlignment const*>(&alignment), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectScaling const*>(&meetOrSlice));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAspectRatioAttribute(void* attributeName, int32_t* meetOrSlice, int32_t* alignment) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *alignment = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectAlignment>(this->shim().GetAspectRatioAttribute(*reinterpret_cast<hstring const*>(&attributeName), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectScaling*>(meetOrSlice)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute>
    {
        int32_t __stdcall put_PaintType(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PaintType(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintType const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PaintType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintType>(this->shim().PaintType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Color(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Color(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Color(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().Color());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Id(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Id(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute>
    {
        int32_t __stdcall CreatePathGeometry(void** outputGeometry) noexcept final try
        {
            clear_abi(outputGeometry);
            typename D::abi_guard guard(this->shim());
            *outputGeometry = detach_from<winrt::Microsoft::Graphics::Canvas::Geometry::CanvasGeometry>(this->shim().CreatePathGeometry());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreatePathGeometryWithFill(int32_t fill, void** outputGeometry) noexcept final try
        {
            clear_abi(outputGeometry);
            typename D::abi_guard guard(this->shim());
            *outputGeometry = detach_from<winrt::Microsoft::Graphics::Canvas::Geometry::CanvasGeometry>(this->shim().CreatePathGeometry(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination const*>(&fill)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Commands(uint32_t* __valueElementsSize, int32_t** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().Commands());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCommands(int32_t startIndex, int32_t elementCount, uint32_t* __outputValueElementsSize, int32_t** outputValueElements) noexcept final try
        {
            clear_abi(outputValueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__outputValueElementsSize, *outputValueElements) = detach_abi(this->shim().GetCommands(startIndex, elementCount));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SegmentData(uint32_t* __valueElementsSize, float** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().SegmentData());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSegmentData(int32_t startIndex, int32_t elementCount, uint32_t* __outputValueElementsSize, float** outputValueElements) noexcept final try
        {
            clear_abi(outputValueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__outputValueElementsSize, *outputValueElements) = detach_abi(this->shim().GetSegmentData(startIndex, elementCount));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveCommandsAtEnd(int32_t commandsCount) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveCommandsAtEnd(commandsCount);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveSegmentDataAtEnd(int32_t commandsCount) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveSegmentDataAtEnd(commandsCount);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetCommands(int32_t startIndex, uint32_t __commandsSize, int32_t* commands) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetCommands(startIndex, array_view<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand const>(reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand const *>(commands), reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand const *>(commands) + __commandsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetSegmentData(int32_t startIndex, uint32_t __segmentDataSize, float* segmentData) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetSegmentData(startIndex, array_view<float const>(reinterpret_cast<float const *>(segmentData), reinterpret_cast<float const *>(segmentData) + __segmentDataSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute>
    {
        int32_t __stdcall get_Points(uint32_t* __valueElementsSize, winrt::Windows::Foundation::Numerics::float2** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().Points());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetPoints(int32_t startIndex, int32_t elementCount, uint32_t* __outputValueElementsSize, winrt::Windows::Foundation::Numerics::float2** outputValueElements) noexcept final try
        {
            clear_abi(outputValueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__outputValueElementsSize, *outputValueElements) = detach_abi(this->shim().GetPoints(startIndex, elementCount));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemovePointsAtEnd(int32_t pointCount) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemovePointsAtEnd(pointCount);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetPoints(int32_t startIndex, uint32_t __pointsSize, winrt::Windows::Foundation::Numerics::float2* points) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetPoints(startIndex, array_view<winrt::Windows::Foundation::Numerics::float2 const>(reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const *>(points), reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const *>(points) + __pointsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute>
    {
        int32_t __stdcall GetDashes(uint32_t* __valueElementsSize, float** valueElements) noexcept final try
        {
            clear_abi(valueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetDashes());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDashesWithUnits(int32_t startIndex, int32_t elementCount, uint32_t* __outputUnitsElementsSize, int32_t** outputUnitsElements, uint32_t* __outputValueElementsSize, float** outputValueElements) noexcept final try
        {
            clear_abi(outputUnitsElements);
            clear_abi(outputValueElements);
            typename D::abi_guard guard(this->shim());
            std::tie(*__outputValueElementsSize, *outputValueElements) = detach_abi(this->shim().GetDashes(startIndex, elementCount, detach_abi<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits>(__outputUnitsElementsSize, outputUnitsElements)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveDashesAtEnd(int32_t dashCount) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveDashesAtEnd(dashCount);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetDashes(int32_t startIndex, uint32_t __dashesSize, float* dashes) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetDashes(startIndex, array_view<float const>(reinterpret_cast<float const *>(dashes), reinterpret_cast<float const *>(dashes) + __dashesSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetDashesWithUnit(int32_t startIndex, uint32_t __dashesSize, float* dashes, int32_t units) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetDashes(startIndex, array_view<float const>(reinterpret_cast<float const *>(dashes), reinterpret_cast<float const *>(dashes) + __dashesSize), *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits const*>(&units));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetDashesWithUnits(int32_t startIndex, uint32_t __dashValuesSize, float* dashValues, uint32_t __unitValuesSize, int32_t* unitValues) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetDashes(startIndex, array_view<float const>(reinterpret_cast<float const *>(dashValues), reinterpret_cast<float const *>(dashValues) + __dashValuesSize), array_view<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits const>(reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits const *>(unitValues), reinterpret_cast<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits const *>(unitValues) + __unitValuesSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgTextElement> : produce_base<D, winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgTextElement>
    {
        int32_t __stdcall put_Text(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Text(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Text(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Text());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas::Svg
{
    inline CanvasSvgDocument::CanvasSvgDocument(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator) :
        CanvasSvgDocument(impl::call_factory<CanvasSvgDocument, ICanvasSvgDocumentFactory>([&](ICanvasSvgDocumentFactory const& f) { return f.CreateEmpty(resourceCreator); }))
    {
    }
    inline auto CanvasSvgDocument::LoadFromXml(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& xmlString)
    {
        return impl::call_factory<CanvasSvgDocument, ICanvasSvgDocumentStatics>([&](ICanvasSvgDocumentStatics const& f) { return f.LoadFromXml(resourceCreator, xmlString); });
    }
    inline auto CanvasSvgDocument::LoadAsync(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, winrt::Windows::Storage::Streams::IRandomAccessStream const& stream)
    {
        return impl::call_factory<CanvasSvgDocument, ICanvasSvgDocumentStatics>([&](ICanvasSvgDocumentStatics const& f) { return f.LoadAsync(resourceCreator, stream); });
    }
    inline auto CanvasSvgDocument::IsSupported(winrt::Microsoft::Graphics::Canvas::CanvasDevice const& device)
    {
        return impl::call_factory<CanvasSvgDocument, ICanvasSvgDocumentStatics>([&](ICanvasSvgDocumentStatics const& f) { return f.IsSupported(device); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::ICanvasSvgTextElement> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintAttribute> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathAttribute> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgPointsAttribute> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgStrokeDashArrayAttribute> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::Svg::CanvasSvgTextElement> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
