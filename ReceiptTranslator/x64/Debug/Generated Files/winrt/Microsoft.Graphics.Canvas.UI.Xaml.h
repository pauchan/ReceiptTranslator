// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220531.1

#pragma once
#ifndef WINRT_Microsoft_Graphics_Canvas_UI_Xaml_H
#define WINRT_Microsoft_Graphics_Canvas_UI_Xaml_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.220531.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.220531.1"
#include "winrt/Microsoft.Graphics.Canvas.UI.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.2.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.UI.2.h"
#include "winrt/impl/Microsoft.UI.Composition.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Controls.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Media.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Media.Imaging.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Graphics.Imaging.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.UI.Xaml.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::CreateResources(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl, winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> const& value) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->add_CreateResources(*(void**)(&value), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::CreateResources(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl, winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> const& value) const
    {
        return impl::make_event_revoker<D, CreateResources_revoker>(this, CreateResources(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::CreateResources(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->remove_CreateResources(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::ReadyToDraw() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->get_ReadyToDraw(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::Draw(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs> const& value) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->add_Draw(*(void**)(&value), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::Draw(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs> const& value) const
    {
        return impl::make_event_revoker<D, Draw_revoker>(this, Draw(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::Draw(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->remove_Draw(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::ClearColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->put_ClearColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::ClearColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->get_ClearColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::Invalidate() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->Invalidate());
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::Size() const
    {
        winrt::Windows::Foundation::Size size{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->get_Size(put_abi(size)));
        return size;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::RemoveFromVisualTree() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->RemoveFromVisualTree());
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::UseSharedDevice() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->get_UseSharedDevice(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::UseSharedDevice(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->put_UseSharedDevice(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::ForceSoftwareRenderer() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->get_ForceSoftwareRenderer(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::ForceSoftwareRenderer(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->put_ForceSoftwareRenderer(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::CustomDevice() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->get_CustomDevice(&value));
        return winrt::Microsoft::Graphics::Canvas::CanvasDevice{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::CustomDevice(winrt::Microsoft::Graphics::Canvas::CanvasDevice const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->put_CustomDevice(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::DpiScale() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->get_DpiScale(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>::DpiScale(float ratio) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl)->put_DpiScale(ratio));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgs<D>::DrawingSession() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs)->get_DrawingSession(&value));
        return winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgsFactory<D>::Create(winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const& canvasDrawingSession) const
    {
        void* drawEventArgs{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgsFactory)->Create(*(void**)(&canvasDrawingSession), &drawEventArgs));
        return winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs{ drawEventArgs, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource<D>::CreateDrawingSession(winrt::Windows::UI::Color const& clearColor) const
    {
        void* drawingSession{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource)->CreateDrawingSession(impl::bind_in(clearColor), &drawingSession));
        return winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession{ drawingSession, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource<D>::CreateDrawingSession(winrt::Windows::UI::Color const& clearColor, winrt::Windows::Foundation::Rect const& updateRectangle) const
    {
        void* drawingSession{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource)->CreateDrawingSessionWithUpdateRectangle(impl::bind_in(clearColor), impl::bind_in(updateRectangle), &drawingSession));
        return winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession{ drawingSession, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource<D>::Recreate(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource)->Recreate(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource<D>::Size() const
    {
        winrt::Windows::Foundation::Size size{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource)->get_Size(put_abi(size)));
        return size;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource<D>::SizeInPixels() const
    {
        winrt::Windows::Graphics::Imaging::BitmapSize size{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource)->get_SizeInPixels(put_abi(size)));
        return size;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource<D>::AlphaMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource)->get_AlphaMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory<D>::CreateWithSize(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, winrt::Windows::Foundation::Size const& size) const
    {
        void* imageSource{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory)->CreateWithSize(*(void**)(&resourceCreator), impl::bind_in(size), &imageSource));
        return winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasImageSource{ imageSource, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory<D>::CreateWithWidthAndHeight(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, float width, float height) const
    {
        void* imageSource{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory)->CreateWithWidthAndHeight(*(void**)(&resourceCreator), width, height, &imageSource));
        return winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasImageSource{ imageSource, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory<D>::CreateWithWidthAndHeightAndDpi(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi) const
    {
        void* imageSource{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory)->CreateWithWidthAndHeightAndDpi(*(void**)(&resourceCreator), width, height, dpi, &imageSource));
        return winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasImageSource{ imageSource, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory<D>::CreateWithWidthAndHeightAndDpiAndAlphaMode(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi, winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) const
    {
        void* imageSource{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory)->CreateWithWidthAndHeightAndDpiAndAlphaMode(*(void**)(&resourceCreator), width, height, dpi, static_cast<int32_t>(alphaMode), &imageSource));
        return winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasImageSource{ imageSource, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasRegionsInvalidatedEventArgs<D>::InvalidatedRegions() const
    {
        uint32_t value_impl_size{};
        winrt::Windows::Foundation::Rect* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs)->get_InvalidatedRegions(&value_impl_size, &value));
        return com_array<winrt::Windows::Foundation::Rect>{ value, value_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasRegionsInvalidatedEventArgs<D>::VisibleRegion() const
    {
        winrt::Windows::Foundation::Rect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs)->get_VisibleRegion(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasSwapChainPanel<D>::SwapChain(winrt::Microsoft::Graphics::Canvas::CanvasSwapChain const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel)->put_SwapChain(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasSwapChainPanel<D>::SwapChain() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel)->get_SwapChain(&value));
        return winrt::Microsoft::Graphics::Canvas::CanvasSwapChain{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasSwapChainPanel<D>::RemoveFromVisualTree() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel)->RemoveFromVisualTree());
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::CreateResources(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl, winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> const& value) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->add_CreateResources(*(void**)(&value), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::CreateResources(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl, winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> const& value) const
    {
        return impl::make_event_revoker<D, CreateResources_revoker>(this, CreateResources(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::CreateResources(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->remove_CreateResources(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::ReadyToDraw() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->get_ReadyToDraw(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::RegionsInvalidated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs> const& value) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->add_RegionsInvalidated(*(void**)(&value), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::RegionsInvalidated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs> const& value) const
    {
        return impl::make_event_revoker<D, RegionsInvalidated_revoker>(this, RegionsInvalidated(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::RegionsInvalidated(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->remove_RegionsInvalidated(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::ClearColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->put_ClearColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::ClearColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->get_ClearColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::CreateDrawingSession(winrt::Windows::Foundation::Rect const& updateRectangle) const
    {
        void* drawingSession{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->CreateDrawingSession(impl::bind_in(updateRectangle), &drawingSession));
        return winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession{ drawingSession, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::SuspendDrawingSession(winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const& drawingSession) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->SuspendDrawingSession(*(void**)(&drawingSession)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::ResumeDrawingSession(winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const& drawingSession) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->ResumeDrawingSession(*(void**)(&drawingSession)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::Invalidate() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->Invalidate());
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::Invalidate(winrt::Windows::Foundation::Rect const& region) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->InvalidateRegion(impl::bind_in(region)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::Size() const
    {
        winrt::Windows::Foundation::Size size{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->get_Size(put_abi(size)));
        return size;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::RemoveFromVisualTree() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->RemoveFromVisualTree());
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::UseSharedDevice() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->get_UseSharedDevice(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::UseSharedDevice(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->put_UseSharedDevice(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::ForceSoftwareRenderer() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->get_ForceSoftwareRenderer(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::ForceSoftwareRenderer(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->put_ForceSoftwareRenderer(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::CustomDevice() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->get_CustomDevice(&value));
        return winrt::Microsoft::Graphics::Canvas::CanvasDevice{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::CustomDevice(winrt::Microsoft::Graphics::Canvas::CanvasDevice const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->put_CustomDevice(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::DpiScale() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->get_DpiScale(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>::DpiScale(float ratio) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl)->put_DpiScale(ratio));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::Source() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->get_Source(&value));
        return winrt::Microsoft::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::CreateDrawingSession(winrt::Windows::UI::Color const& clearColor, winrt::Windows::Foundation::Rect const& updateRectangle) const
    {
        void* drawingSession{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->CreateDrawingSession(impl::bind_in(clearColor), impl::bind_in(updateRectangle), &drawingSession));
        return winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession{ drawingSession, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::SuspendDrawingSession(winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const& drawingSession) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->SuspendDrawingSession(*(void**)(&drawingSession)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::ResumeDrawingSession(winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const& drawingSession) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->ResumeDrawingSession(*(void**)(&drawingSession)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::Invalidate() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->Invalidate());
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::Invalidate(winrt::Windows::Foundation::Rect const& region) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->InvalidateRegion(impl::bind_in(region)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::RaiseRegionsInvalidatedIfAny() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->RaiseRegionsInvalidatedIfAny());
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::RegionsInvalidated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs> const& value) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->add_RegionsInvalidated(*(void**)(&value), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::RegionsInvalidated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs> const& value) const
    {
        return impl::make_event_revoker<D, RegionsInvalidated_revoker>(this, RegionsInvalidated(value));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::RegionsInvalidated(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->remove_RegionsInvalidated(impl::bind_in(token));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::Resize(winrt::Windows::Foundation::Size const& size) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->ResizeWithSize(impl::bind_in(size)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::Resize(float width, float height) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->ResizeWithWidthAndHeight(width, height));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::Resize(float width, float height, float dpi) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->ResizeWithWidthAndHeightAndDpi(width, height, dpi));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::Recreate(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->Recreate(*(void**)(&resourceCreator)));
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::Size() const
    {
        winrt::Windows::Foundation::Size size{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->get_Size(put_abi(size)));
        return size;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::SizeInPixels() const
    {
        winrt::Windows::Graphics::Imaging::BitmapSize size{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->get_SizeInPixels(put_abi(size)));
        return size;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>::AlphaMode() const
    {
        winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource)->get_AlphaMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory<D>::CreateWithSize(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, winrt::Windows::Foundation::Size const& size) const
    {
        void* imageSource{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory)->CreateWithSize(*(void**)(&resourceCreator), impl::bind_in(size), &imageSource));
        return winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource{ imageSource, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory<D>::CreateWithWidthAndHeight(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, float width, float height) const
    {
        void* imageSource{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory)->CreateWithWidthAndHeight(*(void**)(&resourceCreator), width, height, &imageSource));
        return winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource{ imageSource, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory<D>::CreateWithWidthAndHeightAndDpi(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi) const
    {
        void* imageSource{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory)->CreateWithWidthAndHeightAndDpi(*(void**)(&resourceCreator), width, height, dpi, &imageSource));
        return winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource{ imageSource, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory<D>::CreateWithWidthAndHeightAndDpiAndAlphaMode(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi, winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) const
    {
        void* imageSource{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory)->CreateWithWidthAndHeightAndDpiAndAlphaMode(*(void**)(&resourceCreator), width, height, dpi, static_cast<int32_t>(alphaMode), &imageSource));
        return winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource{ imageSource, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl> : produce_base<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl>
    {
        int32_t __stdcall add_CreateResources(void* value, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().CreateResources(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl, winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_CreateResources(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CreateResources(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall get_ReadyToDraw(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ReadyToDraw());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_Draw(void* value, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Draw(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs> const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Draw(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Draw(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall put_ClearColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClearColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ClearColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().ClearColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Invalidate() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Invalidate();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Size(winrt::Windows::Foundation::Size* size) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Size>(size);
            typename D::abi_guard guard(this->shim());
            *size = detach_from<winrt::Windows::Foundation::Size>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveFromVisualTree() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveFromVisualTree();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_UseSharedDevice(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().UseSharedDevice());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_UseSharedDevice(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UseSharedDevice(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ForceSoftwareRenderer(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ForceSoftwareRenderer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ForceSoftwareRenderer(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ForceSoftwareRenderer(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CustomDevice(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().CustomDevice());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CustomDevice(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CustomDevice(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasDevice const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DpiScale(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().DpiScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DpiScale(float ratio) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DpiScale(ratio);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs> : produce_base<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs>
    {
        int32_t __stdcall get_DrawingSession(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().DrawingSession());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgsFactory> : produce_base<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgsFactory>
    {
        int32_t __stdcall Create(void* canvasDrawingSession, void** drawEventArgs) noexcept final try
        {
            clear_abi(drawEventArgs);
            typename D::abi_guard guard(this->shim());
            *drawEventArgs = detach_from<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs>(this->shim().Create(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const*>(&canvasDrawingSession)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource> : produce_base<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource>
    {
        int32_t __stdcall CreateDrawingSession(struct struct_Windows_UI_Color clearColor, void** drawingSession) noexcept final try
        {
            clear_abi(drawingSession);
            typename D::abi_guard guard(this->shim());
            *drawingSession = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().CreateDrawingSession(*reinterpret_cast<winrt::Windows::UI::Color const*>(&clearColor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateDrawingSessionWithUpdateRectangle(struct struct_Windows_UI_Color clearColor, winrt::Windows::Foundation::Rect updateRectangle, void** drawingSession) noexcept final try
        {
            clear_abi(drawingSession);
            typename D::abi_guard guard(this->shim());
            *drawingSession = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().CreateDrawingSession(*reinterpret_cast<winrt::Windows::UI::Color const*>(&clearColor), *reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&updateRectangle)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Recreate(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Recreate(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Size(winrt::Windows::Foundation::Size* size) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Size>(size);
            typename D::abi_guard guard(this->shim());
            *size = detach_from<winrt::Windows::Foundation::Size>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SizeInPixels(struct struct_Windows_Graphics_Imaging_BitmapSize* size) noexcept final try
        {
            zero_abi<winrt::Windows::Graphics::Imaging::BitmapSize>(size);
            typename D::abi_guard guard(this->shim());
            *size = detach_from<winrt::Windows::Graphics::Imaging::BitmapSize>(this->shim().SizeInPixels());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory> : produce_base<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory>
    {
        int32_t __stdcall CreateWithSize(void* resourceCreator, winrt::Windows::Foundation::Size size, void** imageSource) noexcept final try
        {
            clear_abi(imageSource);
            typename D::abi_guard guard(this->shim());
            *imageSource = detach_from<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasImageSource>(this->shim().CreateWithSize(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), *reinterpret_cast<winrt::Windows::Foundation::Size const*>(&size)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateWithWidthAndHeight(void* resourceCreator, float width, float height, void** imageSource) noexcept final try
        {
            clear_abi(imageSource);
            typename D::abi_guard guard(this->shim());
            *imageSource = detach_from<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasImageSource>(this->shim().CreateWithWidthAndHeight(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), width, height));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateWithWidthAndHeightAndDpi(void* resourceCreator, float width, float height, float dpi, void** imageSource) noexcept final try
        {
            clear_abi(imageSource);
            typename D::abi_guard guard(this->shim());
            *imageSource = detach_from<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasImageSource>(this->shim().CreateWithWidthAndHeightAndDpi(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), width, height, dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateWithWidthAndHeightAndDpiAndAlphaMode(void* resourceCreator, float width, float height, float dpi, int32_t alphaMode, void** imageSource) noexcept final try
        {
            clear_abi(imageSource);
            typename D::abi_guard guard(this->shim());
            *imageSource = detach_from<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasImageSource>(this->shim().CreateWithWidthAndHeightAndDpiAndAlphaMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), width, height, dpi, *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alphaMode)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs> : produce_base<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs>
    {
        int32_t __stdcall get_InvalidatedRegions(uint32_t* __valueSize, winrt::Windows::Foundation::Rect** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueSize, *value) = detach_abi(this->shim().InvalidatedRegions());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_VisibleRegion(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().VisibleRegion());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel> : produce_base<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel>
    {
        int32_t __stdcall put_SwapChain(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SwapChain(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasSwapChain const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SwapChain(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasSwapChain>(this->shim().SwapChain());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveFromVisualTree() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveFromVisualTree();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl> : produce_base<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl>
    {
        int32_t __stdcall add_CreateResources(void* value, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().CreateResources(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl, winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_CreateResources(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CreateResources(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall get_ReadyToDraw(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ReadyToDraw());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_RegionsInvalidated(void* value, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().RegionsInvalidated(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs> const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_RegionsInvalidated(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RegionsInvalidated(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall put_ClearColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClearColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ClearColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().ClearColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateDrawingSession(winrt::Windows::Foundation::Rect updateRectangle, void** drawingSession) noexcept final try
        {
            clear_abi(drawingSession);
            typename D::abi_guard guard(this->shim());
            *drawingSession = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().CreateDrawingSession(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&updateRectangle)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SuspendDrawingSession(void* drawingSession) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SuspendDrawingSession(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const*>(&drawingSession));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ResumeDrawingSession(void* drawingSession) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ResumeDrawingSession(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const*>(&drawingSession));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Invalidate() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Invalidate();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall InvalidateRegion(winrt::Windows::Foundation::Rect region) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Invalidate(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&region));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Size(winrt::Windows::Foundation::Size* size) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Size>(size);
            typename D::abi_guard guard(this->shim());
            *size = detach_from<winrt::Windows::Foundation::Size>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveFromVisualTree() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveFromVisualTree();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_UseSharedDevice(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().UseSharedDevice());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_UseSharedDevice(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UseSharedDevice(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ForceSoftwareRenderer(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ForceSoftwareRenderer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ForceSoftwareRenderer(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ForceSoftwareRenderer(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CustomDevice(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().CustomDevice());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CustomDevice(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CustomDevice(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasDevice const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DpiScale(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().DpiScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DpiScale(float ratio) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DpiScale(ratio);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource> : produce_base<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource>
    {
        int32_t __stdcall get_Source(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateDrawingSession(struct struct_Windows_UI_Color clearColor, winrt::Windows::Foundation::Rect updateRectangle, void** drawingSession) noexcept final try
        {
            clear_abi(drawingSession);
            typename D::abi_guard guard(this->shim());
            *drawingSession = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().CreateDrawingSession(*reinterpret_cast<winrt::Windows::UI::Color const*>(&clearColor), *reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&updateRectangle)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SuspendDrawingSession(void* drawingSession) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SuspendDrawingSession(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const*>(&drawingSession));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ResumeDrawingSession(void* drawingSession) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ResumeDrawingSession(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const*>(&drawingSession));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Invalidate() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Invalidate();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall InvalidateRegion(winrt::Windows::Foundation::Rect region) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Invalidate(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&region));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RaiseRegionsInvalidatedIfAny() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RaiseRegionsInvalidatedIfAny();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_RegionsInvalidated(void* value, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().RegionsInvalidated(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs> const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_RegionsInvalidated(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RegionsInvalidated(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall ResizeWithSize(winrt::Windows::Foundation::Size size) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Resize(*reinterpret_cast<winrt::Windows::Foundation::Size const*>(&size));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ResizeWithWidthAndHeight(float width, float height) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Resize(width, height);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ResizeWithWidthAndHeightAndDpi(float width, float height, float dpi) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Resize(width, height, dpi);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Recreate(void* resourceCreator) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Recreate(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Size(winrt::Windows::Foundation::Size* size) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Size>(size);
            typename D::abi_guard guard(this->shim());
            *size = detach_from<winrt::Windows::Foundation::Size>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SizeInPixels(struct struct_Windows_Graphics_Imaging_BitmapSize* size) noexcept final try
        {
            zero_abi<winrt::Windows::Graphics::Imaging::BitmapSize>(size);
            typename D::abi_guard guard(this->shim());
            *size = detach_from<winrt::Windows::Graphics::Imaging::BitmapSize>(this->shim().SizeInPixels());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlphaMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory> : produce_base<D, winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory>
    {
        int32_t __stdcall CreateWithSize(void* resourceCreator, winrt::Windows::Foundation::Size size, void** imageSource) noexcept final try
        {
            clear_abi(imageSource);
            typename D::abi_guard guard(this->shim());
            *imageSource = detach_from<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource>(this->shim().CreateWithSize(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), *reinterpret_cast<winrt::Windows::Foundation::Size const*>(&size)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateWithWidthAndHeight(void* resourceCreator, float width, float height, void** imageSource) noexcept final try
        {
            clear_abi(imageSource);
            typename D::abi_guard guard(this->shim());
            *imageSource = detach_from<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource>(this->shim().CreateWithWidthAndHeight(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), width, height));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateWithWidthAndHeightAndDpi(void* resourceCreator, float width, float height, float dpi, void** imageSource) noexcept final try
        {
            clear_abi(imageSource);
            typename D::abi_guard guard(this->shim());
            *imageSource = detach_from<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource>(this->shim().CreateWithWidthAndHeightAndDpi(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), width, height, dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateWithWidthAndHeightAndDpiAndAlphaMode(void* resourceCreator, float width, float height, float dpi, int32_t alphaMode, void** imageSource) noexcept final try
        {
            clear_abi(imageSource);
            typename D::abi_guard guard(this->shim());
            *imageSource = detach_from<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource>(this->shim().CreateWithWidthAndHeightAndDpiAndAlphaMode(*reinterpret_cast<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), width, height, dpi, *reinterpret_cast<winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alphaMode)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas::UI::Xaml
{
    inline CanvasControl::CanvasControl() :
        CanvasControl(impl::call_factory_cast<CanvasControl(*)(winrt::Windows::Foundation::IActivationFactory const&), CanvasControl>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<CanvasControl>(); }))
    {
    }
    inline CanvasDrawEventArgs::CanvasDrawEventArgs(winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const& canvasDrawingSession) :
        CanvasDrawEventArgs(impl::call_factory<CanvasDrawEventArgs, ICanvasDrawEventArgsFactory>([&](ICanvasDrawEventArgsFactory const& f) { return f.Create(canvasDrawingSession); }))
    {
    }
    inline CanvasImageSource::CanvasImageSource(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, winrt::Windows::Foundation::Size const& size) :
        CanvasImageSource(impl::call_factory<CanvasImageSource, ICanvasImageSourceFactory>([&](ICanvasImageSourceFactory const& f) { return f.CreateWithSize(resourceCreator, size); }))
    {
    }
    inline CanvasImageSource::CanvasImageSource(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, float width, float height) :
        CanvasImageSource(impl::call_factory<CanvasImageSource, ICanvasImageSourceFactory>([&](ICanvasImageSourceFactory const& f) { return f.CreateWithWidthAndHeight(resourceCreator, width, height); }))
    {
    }
    inline CanvasImageSource::CanvasImageSource(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi) :
        CanvasImageSource(impl::call_factory<CanvasImageSource, ICanvasImageSourceFactory>([&](ICanvasImageSourceFactory const& f) { return f.CreateWithWidthAndHeightAndDpi(resourceCreator, width, height, dpi); }))
    {
    }
    inline CanvasImageSource::CanvasImageSource(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi, winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) :
        CanvasImageSource(impl::call_factory<CanvasImageSource, ICanvasImageSourceFactory>([&](ICanvasImageSourceFactory const& f) { return f.CreateWithWidthAndHeightAndDpiAndAlphaMode(resourceCreator, width, height, dpi, alphaMode); }))
    {
    }
    inline CanvasSwapChainPanel::CanvasSwapChainPanel() :
        CanvasSwapChainPanel(impl::call_factory_cast<CanvasSwapChainPanel(*)(winrt::Windows::Foundation::IActivationFactory const&), CanvasSwapChainPanel>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<CanvasSwapChainPanel>(); }))
    {
    }
    inline CanvasVirtualControl::CanvasVirtualControl() :
        CanvasVirtualControl(impl::call_factory_cast<CanvasVirtualControl(*)(winrt::Windows::Foundation::IActivationFactory const&), CanvasVirtualControl>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<CanvasVirtualControl>(); }))
    {
    }
    inline CanvasVirtualImageSource::CanvasVirtualImageSource(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, winrt::Windows::Foundation::Size const& size) :
        CanvasVirtualImageSource(impl::call_factory<CanvasVirtualImageSource, ICanvasVirtualImageSourceFactory>([&](ICanvasVirtualImageSourceFactory const& f) { return f.CreateWithSize(resourceCreator, size); }))
    {
    }
    inline CanvasVirtualImageSource::CanvasVirtualImageSource(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, float width, float height) :
        CanvasVirtualImageSource(impl::call_factory<CanvasVirtualImageSource, ICanvasVirtualImageSourceFactory>([&](ICanvasVirtualImageSourceFactory const& f) { return f.CreateWithWidthAndHeight(resourceCreator, width, height); }))
    {
    }
    inline CanvasVirtualImageSource::CanvasVirtualImageSource(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi) :
        CanvasVirtualImageSource(impl::call_factory<CanvasVirtualImageSource, ICanvasVirtualImageSourceFactory>([&](ICanvasVirtualImageSourceFactory const& f) { return f.CreateWithWidthAndHeightAndDpi(resourceCreator, width, height, dpi); }))
    {
    }
    inline CanvasVirtualImageSource::CanvasVirtualImageSource(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi, winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) :
        CanvasVirtualImageSource(impl::call_factory<CanvasVirtualImageSource, ICanvasVirtualImageSourceFactory>([&](ICanvasVirtualImageSourceFactory const& f) { return f.CreateWithWidthAndHeightAndDpiAndAlphaMode(resourceCreator, width, height, dpi, alphaMode); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgsFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasImageSource> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasSwapChainPanel> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
